// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBMonitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonitor_Probe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonitor_Probe_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonitor_ProbeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonitor_ProbeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonitor_ToXGS_SoftwareStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonitor_ToXGS_SoftwareStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PBMonitor_TargetDistribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonitor_TargetDistribution_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonitor_AliveTargetCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonitor_AliveTargetCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PB_Enum_TargetDistributionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Monitor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Monitor_2eproto() {
  protobuf_AddDesc_Monitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Monitor.proto");
  GOOGLE_CHECK(file != NULL);
  PBMonitor_descriptor_ = file->message_type(0);
  static const int PBMonitor_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, recordutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, sequencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, enum_sender_software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, softwarestartedutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, monitorprobe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, monitorprobeack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, listmonitor_targetdistribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, listmonitor_alivetargetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, listmessagesrcvdpertargetinfosourceandtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, listtoxgssoftwarestatus_),
  };
  PBMonitor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMonitor_descriptor_,
      PBMonitor::internal_default_instance(),
      PBMonitor_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMonitor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor, _internal_metadata_));
  PBMonitor_Probe_descriptor_ = file->message_type(1);
  static const int PBMonitor_Probe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_Probe, recordutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_Probe, monitorprobesequencenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_Probe, strmsg_),
  };
  PBMonitor_Probe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMonitor_Probe_descriptor_,
      PBMonitor_Probe::internal_default_instance(),
      PBMonitor_Probe_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMonitor_Probe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_Probe, _internal_metadata_));
  PBMonitor_ProbeAck_descriptor_ = file->message_type(2);
  static const int PBMonitor_ProbeAck_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, recordutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, enum_probesender_software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, monitorprobesequencenumacked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, totalmessagesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, origtargetpositionsrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, validorigtargetpositionsrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, preprocessedtargetpositionsrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, fusedtargetpositionsrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, anomalymessagesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, configmessagesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, requestmessagesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, commandmessagesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, totalmessagessent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, validorigtargetpositionssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, preprocessedtargetpositionssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, fusedtargetpositionssent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, anomalymessagessent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, configmessagessent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, requestmessagessent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, commandmessagessent_),
  };
  PBMonitor_ProbeAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMonitor_ProbeAck_descriptor_,
      PBMonitor_ProbeAck::internal_default_instance(),
      PBMonitor_ProbeAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMonitor_ProbeAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ProbeAck, _internal_metadata_));
  PBMonitor_ToXGS_SoftwareStatus_descriptor_ = file->message_type(3);
  static const int PBMonitor_ToXGS_SoftwareStatus_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, recordutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, subsys_xgs_hjff_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, subsys_zhcl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, subsys_xxfenxi_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, subsys_ywgl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, subsys_sjgl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_xxzhcl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_xxgl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_xxfenfa_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_jktj_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_wjfx_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_ycgj_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_xtjk_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_yhqxgl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_sjyyglwh_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_sjkyxztjk_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_sjbfhf_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, module_jrycl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, errordescription_),
  };
  PBMonitor_ToXGS_SoftwareStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMonitor_ToXGS_SoftwareStatus_descriptor_,
      PBMonitor_ToXGS_SoftwareStatus::internal_default_instance(),
      PBMonitor_ToXGS_SoftwareStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMonitor_ToXGS_SoftwareStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_ToXGS_SoftwareStatus, _internal_metadata_));
  PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus_descriptor_ = PBMonitor_ToXGS_SoftwareStatus_descriptor_->enum_type(0);
  PBMonitor_TargetDistribution_descriptor_ = file->message_type(4);
  static const int PBMonitor_TargetDistribution_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_TargetDistribution, recordutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_TargetDistribution, distribution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_TargetDistribution, distributionstartutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_TargetDistribution, enum_distributionstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_TargetDistribution, message_count_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_TargetDistribution, target_count_sent_),
  };
  PBMonitor_TargetDistribution_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMonitor_TargetDistribution_descriptor_,
      PBMonitor_TargetDistribution::internal_default_instance(),
      PBMonitor_TargetDistribution_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMonitor_TargetDistribution),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_TargetDistribution, _internal_metadata_));
  PBMonitor_AliveTargetCount_descriptor_ = file->message_type(5);
  static const int PBMonitor_AliveTargetCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_AliveTargetCount, recordutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_AliveTargetCount, enum_targetid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_AliveTargetCount, alivetargetcount_),
  };
  PBMonitor_AliveTargetCount_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMonitor_AliveTargetCount_descriptor_,
      PBMonitor_AliveTargetCount::internal_default_instance(),
      PBMonitor_AliveTargetCount_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMonitor_AliveTargetCount),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_AliveTargetCount, _internal_metadata_));
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_descriptor_ = file->message_type(6);
  static const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, recordutctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, enum_targetinfo_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, enum_targetinfo_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, messagesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, targetsrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, messagesrcvdstatus_),
  };
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_descriptor_,
      PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::internal_default_instance(),
      PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_offsets_,
      -1,
      -1,
      -1,
      sizeof(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, _internal_metadata_));
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus_descriptor_ = PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_descriptor_->enum_type(0);
  PB_Enum_TargetDistributionStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Monitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMonitor_descriptor_, PBMonitor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMonitor_Probe_descriptor_, PBMonitor_Probe::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMonitor_ProbeAck_descriptor_, PBMonitor_ProbeAck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMonitor_ToXGS_SoftwareStatus_descriptor_, PBMonitor_ToXGS_SoftwareStatus::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMonitor_TargetDistribution_descriptor_, PBMonitor_TargetDistribution::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMonitor_AliveTargetCount_descriptor_, PBMonitor_AliveTargetCount::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_descriptor_, PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Monitor_2eproto() {
  PBMonitor_default_instance_.Shutdown();
  delete PBMonitor_reflection_;
  PBMonitor_Probe_default_instance_.Shutdown();
  delete PBMonitor_Probe_reflection_;
  PBMonitor_ProbeAck_default_instance_.Shutdown();
  delete PBMonitor_ProbeAck_reflection_;
  PBMonitor_ToXGS_SoftwareStatus_default_instance_.Shutdown();
  delete PBMonitor_ToXGS_SoftwareStatus_reflection_;
  PBMonitor_TargetDistribution_default_instance_.Shutdown();
  delete PBMonitor_TargetDistribution_reflection_;
  PBMonitor_AliveTargetCount_default_instance_.Shutdown();
  delete PBMonitor_AliveTargetCount_reflection_;
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_.Shutdown();
  delete PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_reflection_;
}

void protobuf_InitDefaults_Monitor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_CommonEnum_2eproto();
  PBMonitor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PBMonitor_Probe_default_instance_.DefaultConstruct();
  PBMonitor_ProbeAck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PBMonitor_ToXGS_SoftwareStatus_default_instance_.DefaultConstruct();
  PBMonitor_TargetDistribution_default_instance_.DefaultConstruct();
  PBMonitor_AliveTargetCount_default_instance_.DefaultConstruct();
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_.DefaultConstruct();
  PBMonitor_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBMonitor_Probe_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBMonitor_ProbeAck_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBMonitor_ToXGS_SoftwareStatus_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBMonitor_TargetDistribution_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBMonitor_AliveTargetCount_default_instance_.get_mutable()->InitAsDefaultInstance();
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_Monitor_2eproto_once_);
void protobuf_InitDefaults_Monitor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_Monitor_2eproto_once_,
                 &protobuf_InitDefaults_Monitor_2eproto_impl);
}
void protobuf_AddDesc_Monitor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_Monitor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMonitor.proto\032\020CommonEnum.proto\"\221\004\n\tPB"
    "Monitor\022\025\n\rrecordUTCTime\030\001 \001(\r\022\023\n\013sequen"
    "ceNum\030\002 \001(\r\022/\n\024enum_Sender_Software\030\003 \001("
    "\0162\021.PB_Enum_Software\022\036\n\026softwareStartedU"
    "TCTime\030\004 \001(\r\022&\n\014monitorProbe\030\005 \001(\0132\020.PBM"
    "onitor_Probe\022,\n\017monitorProbeAck\030\006 \001(\0132\023."
    "PBMonitor_ProbeAck\022E\n\036listMonitor_Target"
    "Distribution\030\007 \003(\0132\035.PBMonitor_TargetDis"
    "tribution\022A\n\034listMonitor_AliveTargetCoun"
    "t\030\010 \003(\0132\033.PBMonitor_AliveTargetCount\022e\n*"
    "listMessagesRcvdPerTargetInfoSourceAndTy"
    "pe\030\t \003(\01321.PBMonitor_MessagesRcvdPerTarg"
    "etInfoSourceAndType\022@\n\027listToXGSSoftware"
    "Status\030\n \003(\0132\037.PBMonitor_ToXGS_SoftwareS"
    "tatus\"Y\n\017PBMonitor_Probe\022\025\n\rrecordUTCTim"
    "e\030\001 \001(\r\022\037\n\027monitorProbeSequenceNum\030\002 \001(\r"
    "\022\016\n\006strMsg\030\003 \001(\t\"\246\005\n\022PBMonitor_ProbeAck\022"
    "\025\n\rrecordUTCTime\030\001 \001(\r\0224\n\031enum_ProbeSend"
    "er_Software\030\002 \001(\0162\021.PB_Enum_Software\022$\n\034"
    "monitorProbeSequenceNumAcked\030\003 \001(\r\022\031\n\021to"
    "talMessagesRcvd\030\004 \001(\004\022\037\n\027origTargetPosit"
    "ionsRcvd\030\005 \001(\004\022$\n\034validOrigTargetPositio"
    "nsRcvd\030\006 \001(\004\022\'\n\037preprocessedTargetPositi"
    "onsRcvd\030\007 \001(\004\022 \n\030fusedTargetPositionsRcv"
    "d\030\010 \001(\004\022\033\n\023anomalyMessagesRcvd\030\t \001(\004\022\032\n\022"
    "configMessagesRcvd\030\n \001(\r\022\033\n\023requestMessa"
    "gesRcvd\030\013 \001(\r\022\033\n\023commandMessagesRcvd\030\014 \001"
    "(\r\022\031\n\021totalMessagesSent\030\r \001(\004\022$\n\034validOr"
    "igTargetPositionsSent\030\016 \001(\004\022\'\n\037preproces"
    "sedTargetPositionsSent\030\017 \001(\004\022 \n\030fusedTar"
    "getPositionsSent\030\020 \001(\004\022\033\n\023anomalyMessage"
    "sSent\030\021 \001(\004\022\032\n\022configMessagesSent\030\022 \001(\r\022"
    "\033\n\023requestMessagesSent\030\023 \001(\r\022\033\n\023commandM"
    "essagesSent\030\024 \001(\r\"\302\r\n\036PBMonitor_ToXGS_So"
    "ftwareStatus\022\025\n\rrecordUTCTime\030\001 \001(\r\022Z\n\026S"
    "ubsys_XGS_HJFF_Status\030\002 \001(\0162:.PBMonitor_"
    "ToXGS_SoftwareStatus.PB_Enum_XGS_Softwar"
    "eStatus\022V\n\022Subsys_ZHCL_Status\030\003 \001(\0162:.PB"
    "Monitor_ToXGS_SoftwareStatus.PB_Enum_XGS"
    "_SoftwareStatus\022Y\n\025Subsys_XXFenXi_Status"
    "\030\004 \001(\0162:.PBMonitor_ToXGS_SoftwareStatus."
    "PB_Enum_XGS_SoftwareStatus\022V\n\022Subsys_YWG"
    "L_Status\030\005 \001(\0162:.PBMonitor_ToXGS_Softwar"
    "eStatus.PB_Enum_XGS_SoftwareStatus\022V\n\022Su"
    "bsys_SJGL_Status\030\006 \001(\0162:.PBMonitor_ToXGS"
    "_SoftwareStatus.PB_Enum_XGS_SoftwareStat"
    "us\022X\n\024Module_XXZHCL_Status\030\007 \001(\0162:.PBMon"
    "itor_ToXGS_SoftwareStatus.PB_Enum_XGS_So"
    "ftwareStatus\022V\n\022Module_XXGL_Status\030\010 \001(\016"
    "2:.PBMonitor_ToXGS_SoftwareStatus.PB_Enu"
    "m_XGS_SoftwareStatus\022Y\n\025Module_XXFenFa_S"
    "tatus\030\t \001(\0162:.PBMonitor_ToXGS_SoftwareSt"
    "atus.PB_Enum_XGS_SoftwareStatus\022V\n\022Modul"
    "e_JKTJ_Status\030\n \001(\0162:.PBMonitor_ToXGS_So"
    "ftwareStatus.PB_Enum_XGS_SoftwareStatus\022"
    "V\n\022Module_WJFX_Status\030\013 \001(\0162:.PBMonitor_"
    "ToXGS_SoftwareStatus.PB_Enum_XGS_Softwar"
    "eStatus\022V\n\022Module_YCGJ_Status\030\014 \001(\0162:.PB"
    "Monitor_ToXGS_SoftwareStatus.PB_Enum_XGS"
    "_SoftwareStatus\022V\n\022Module_XTJK_Status\030\r "
    "\001(\0162:.PBMonitor_ToXGS_SoftwareStatus.PB_"
    "Enum_XGS_SoftwareStatus\022X\n\024Module_YHQXGL"
    "_Status\030\016 \001(\0162:.PBMonitor_ToXGS_Software"
    "Status.PB_Enum_XGS_SoftwareStatus\022Z\n\026Mod"
    "ule_SJYYGLWH_Status\030\017 \001(\0162:.PBMonitor_To"
    "XGS_SoftwareStatus.PB_Enum_XGS_SoftwareS"
    "tatus\022[\n\027Module_SJKYXZTJK_Status\030\020 \001(\0162:"
    ".PBMonitor_ToXGS_SoftwareStatus.PB_Enum_"
    "XGS_SoftwareStatus\022X\n\024Module_SJBFHF_Stat"
    "us\030\021 \001(\0162:.PBMonitor_ToXGS_SoftwareStatu"
    "s.PB_Enum_XGS_SoftwareStatus\022W\n\023Module_J"
    "RYCL_Status\030\022 \001(\0162:.PBMonitor_ToXGS_Soft"
    "wareStatus.PB_Enum_XGS_SoftwareStatus\022\030\n"
    "\020errorDescription\030\023 \001(\t\"}\n\032PB_Enum_XGS_S"
    "oftwareStatus\022\034\n\030EV_XGS_SoftwareStatus_N"
    "A\020\000\022 \n\034EV_XGS_SoftwareStatus_Normal\020\001\022\037\n"
    "\033EV_XGS_SoftwareStatus_Error\020\002\"\352\001\n\034PBMon"
    "itor_TargetDistribution\022\025\n\rrecordUTCTime"
    "\030\001 \001(\r\022\027\n\017distribution_id\030\002 \001(\005\022 \n\030distr"
    "ibutionStartUTCTime\030\003 \001(\r\022A\n\026enum_Distri"
    "butionState\030\004 \001(\0162!.PB_Enum_TargetDistri"
    "butionStatus\022\032\n\022message_Count_Sent\030\005 \001(\004"
    "\022\031\n\021target_Count_Sent\030\006 \001(\r\"\201\001\n\032PBMonito"
    "r_AliveTargetCount\022\025\n\rrecordUTCTime\030\001 \001("
    "\r\0222\n\022enum_targetID_Type\030\002 \001(\0162\026.PB_Enum_"
    "TargetID_Type\022\030\n\020aliveTargetcount\030\003 \001(\005\""
    "\321\003\n0PBMonitor_MessagesRcvdPerTargetInfoS"
    "ourceAndType\022\025\n\rrecordUTCTime\030\001 \001(\r\022:\n\026e"
    "num_targetInfo_Source\030\002 \001(\0162\032.PB_Enum_Ta"
    "rgetInfo_Source\0226\n\024enum_targetInfo_Type\030"
    "\003 \001(\0162\030.PB_Enum_TargetInfo_Type\022\024\n\014messa"
    "gesRcvd\030\004 \001(\003\022\023\n\013targetsRcvd\030\005 \001(\005\022h\n\022me"
    "ssagesRcvdStatus\030\006 \001(\0162L.PBMonitor_Messa"
    "gesRcvdPerTargetInfoSourceAndType.PB_Enu"
    "m_MessagesRcvdStatus\"}\n\032PB_Enum_Messages"
    "RcvdStatus\022\034\n\030EV_MessagesRcvdStatus_NA\020\000"
    "\022 \n\034EV_MessagesRcvdStatus_Normal\020\001\022\037\n\033EV"
    "_MessagesRcvdStatus_Error\020\002*\300\001\n PB_Enum_"
    "TargetDistributionStatus\022\"\n\036EV_TargetDis"
    "tributionStatus_NA\020\000\022\'\n#EV_TargetDistrib"
    "utionStatus_OnGoing\020\001\022&\n\"EV_TargetDistri"
    "butionStatus_Paused\020\002\022\'\n#EV_TargetDistri"
    "butionStatus_Stopped\020\003B\024\n\022team.iOceanPlu"
    "s.PBb\006proto3", 4132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Monitor.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_CommonEnum_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Monitor_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Monitor_2eproto_once_);
void protobuf_AddDesc_Monitor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Monitor_2eproto_once_,
                 &protobuf_AddDesc_Monitor_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Monitor_2eproto {
  StaticDescriptorInitializer_Monitor_2eproto() {
    protobuf_AddDesc_Monitor_2eproto();
  }
} static_descriptor_initializer_Monitor_2eproto_;
const ::google::protobuf::EnumDescriptor* PB_Enum_TargetDistributionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PB_Enum_TargetDistributionStatus_descriptor_;
}
bool PB_Enum_TargetDistributionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor::kRecordUTCTimeFieldNumber;
const int PBMonitor::kSequenceNumFieldNumber;
const int PBMonitor::kEnumSenderSoftwareFieldNumber;
const int PBMonitor::kSoftwareStartedUTCTimeFieldNumber;
const int PBMonitor::kMonitorProbeFieldNumber;
const int PBMonitor::kMonitorProbeAckFieldNumber;
const int PBMonitor::kListMonitorTargetDistributionFieldNumber;
const int PBMonitor::kListMonitorAliveTargetCountFieldNumber;
const int PBMonitor::kListMessagesRcvdPerTargetInfoSourceAndTypeFieldNumber;
const int PBMonitor::kListToXGSSoftwareStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor::PBMonitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Monitor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor)
}

void PBMonitor::InitAsDefaultInstance() {
  monitorprobe_ = const_cast< ::PBMonitor_Probe*>(
      ::PBMonitor_Probe::internal_default_instance());
  monitorprobeack_ = const_cast< ::PBMonitor_ProbeAck*>(
      ::PBMonitor_ProbeAck::internal_default_instance());
}

PBMonitor::PBMonitor(const PBMonitor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMonitor)
}

void PBMonitor::SharedCtor() {
  monitorprobe_ = NULL;
  monitorprobeack_ = NULL;
  ::memset(&recordutctime_, 0, reinterpret_cast<char*>(&softwarestartedutctime_) -
    reinterpret_cast<char*>(&recordutctime_) + sizeof(softwarestartedutctime_));
  _cached_size_ = 0;
}

PBMonitor::~PBMonitor() {
  // @@protoc_insertion_point(destructor:PBMonitor)
  SharedDtor();
}

void PBMonitor::SharedDtor() {
  if (this != &PBMonitor_default_instance_.get()) {
    delete monitorprobe_;
    delete monitorprobeack_;
  }
}

void PBMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_descriptor_;
}

const PBMonitor& PBMonitor::default_instance() {
  protobuf_InitDefaults_Monitor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBMonitor> PBMonitor_default_instance_;

PBMonitor* PBMonitor::New(::google::protobuf::Arena* arena) const {
  PBMonitor* n = new PBMonitor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PBMonitor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMonitor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recordutctime_, softwarestartedutctime_);
  if (GetArenaNoVirtual() == NULL && monitorprobe_ != NULL) delete monitorprobe_;
  monitorprobe_ = NULL;
  if (GetArenaNoVirtual() == NULL && monitorprobeack_ != NULL) delete monitorprobeack_;
  monitorprobeack_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  listmonitor_targetdistribution_.Clear();
  listmonitor_alivetargetcount_.Clear();
  listmessagesrcvdpertargetinfosourceandtype_.Clear();
  listtoxgssoftwarestatus_.Clear();
}

bool PBMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recordUTCTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequenceNum;
        break;
      }

      // optional uint32 sequenceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_sequenceNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequencenum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enum_Sender_Software;
        break;
      }

      // optional .PB_Enum_Software enum_Sender_Software = 3;
      case 3: {
        if (tag == 24) {
         parse_enum_Sender_Software:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_sender_software(static_cast< ::PB_Enum_Software >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_softwareStartedUTCTime;
        break;
      }

      // optional uint32 softwareStartedUTCTime = 4;
      case 4: {
        if (tag == 32) {
         parse_softwareStartedUTCTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &softwarestartedutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_monitorProbe;
        break;
      }

      // optional .PBMonitor_Probe monitorProbe = 5;
      case 5: {
        if (tag == 42) {
         parse_monitorProbe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monitorprobe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_monitorProbeAck;
        break;
      }

      // optional .PBMonitor_ProbeAck monitorProbeAck = 6;
      case 6: {
        if (tag == 50) {
         parse_monitorProbeAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monitorprobeack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_listMonitor_TargetDistribution;
        break;
      }

      // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
      case 7: {
        if (tag == 58) {
         parse_listMonitor_TargetDistribution:
          DO_(input->IncrementRecursionDepth());
         parse_loop_listMonitor_TargetDistribution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_listmonitor_targetdistribution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_listMonitor_TargetDistribution;
        if (input->ExpectTag(66)) goto parse_loop_listMonitor_AliveTargetCount;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_listMonitor_AliveTargetCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_listmonitor_alivetargetcount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_listMonitor_AliveTargetCount;
        if (input->ExpectTag(74)) goto parse_loop_listMessagesRcvdPerTargetInfoSourceAndType;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_listMessagesRcvdPerTargetInfoSourceAndType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_listmessagesrcvdpertargetinfosourceandtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_listMessagesRcvdPerTargetInfoSourceAndType;
        if (input->ExpectTag(82)) goto parse_loop_listToXGSSoftwareStatus;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_listToXGSSoftwareStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_listtoxgssoftwarestatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_listToXGSSoftwareStatus;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor)
  return false;
#undef DO_
}

void PBMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // optional uint32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequencenum(), output);
  }

  // optional .PB_Enum_Software enum_Sender_Software = 3;
  if (this->enum_sender_software() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enum_sender_software(), output);
  }

  // optional uint32 softwareStartedUTCTime = 4;
  if (this->softwarestartedutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->softwarestartedutctime(), output);
  }

  // optional .PBMonitor_Probe monitorProbe = 5;
  if (this->has_monitorprobe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->monitorprobe_, output);
  }

  // optional .PBMonitor_ProbeAck monitorProbeAck = 6;
  if (this->has_monitorprobeack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->monitorprobeack_, output);
  }

  // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
  for (unsigned int i = 0, n = this->listmonitor_targetdistribution_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->listmonitor_targetdistribution(i), output);
  }

  // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
  for (unsigned int i = 0, n = this->listmonitor_alivetargetcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->listmonitor_alivetargetcount(i), output);
  }

  // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
  for (unsigned int i = 0, n = this->listmessagesrcvdpertargetinfosourceandtype_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->listmessagesrcvdpertargetinfosourceandtype(i), output);
  }

  // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
  for (unsigned int i = 0, n = this->listtoxgssoftwarestatus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->listtoxgssoftwarestatus(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMonitor)
}

::google::protobuf::uint8* PBMonitor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // optional uint32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequencenum(), target);
  }

  // optional .PB_Enum_Software enum_Sender_Software = 3;
  if (this->enum_sender_software() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->enum_sender_software(), target);
  }

  // optional uint32 softwareStartedUTCTime = 4;
  if (this->softwarestartedutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->softwarestartedutctime(), target);
  }

  // optional .PBMonitor_Probe monitorProbe = 5;
  if (this->has_monitorprobe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->monitorprobe_, false, target);
  }

  // optional .PBMonitor_ProbeAck monitorProbeAck = 6;
  if (this->has_monitorprobeack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->monitorprobeack_, false, target);
  }

  // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
  for (unsigned int i = 0, n = this->listmonitor_targetdistribution_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->listmonitor_targetdistribution(i), false, target);
  }

  // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
  for (unsigned int i = 0, n = this->listmonitor_alivetargetcount_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->listmonitor_alivetargetcount(i), false, target);
  }

  // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
  for (unsigned int i = 0, n = this->listmessagesrcvdpertargetinfosourceandtype_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->listmessagesrcvdpertargetinfosourceandtype(i), false, target);
  }

  // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
  for (unsigned int i = 0, n = this->listtoxgssoftwarestatus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->listtoxgssoftwarestatus(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor)
  return target;
}

size_t PBMonitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor)
  size_t total_size = 0;

  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // optional uint32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequencenum());
  }

  // optional .PB_Enum_Software enum_Sender_Software = 3;
  if (this->enum_sender_software() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_sender_software());
  }

  // optional uint32 softwareStartedUTCTime = 4;
  if (this->softwarestartedutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->softwarestartedutctime());
  }

  // optional .PBMonitor_Probe monitorProbe = 5;
  if (this->has_monitorprobe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->monitorprobe_);
  }

  // optional .PBMonitor_ProbeAck monitorProbeAck = 6;
  if (this->has_monitorprobeack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->monitorprobeack_);
  }

  // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
  {
    unsigned int count = this->listmonitor_targetdistribution_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listmonitor_targetdistribution(i));
    }
  }

  // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
  {
    unsigned int count = this->listmonitor_alivetargetcount_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listmonitor_alivetargetcount(i));
    }
  }

  // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
  {
    unsigned int count = this->listmessagesrcvdpertargetinfosourceandtype_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listmessagesrcvdpertargetinfosourceandtype(i));
    }
  }

  // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
  {
    unsigned int count = this->listtoxgssoftwarestatus_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listtoxgssoftwarestatus(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMonitor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor)
    UnsafeMergeFrom(*source);
  }
}

void PBMonitor::MergeFrom(const PBMonitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBMonitor::UnsafeMergeFrom(const PBMonitor& from) {
  GOOGLE_DCHECK(&from != this);
  listmonitor_targetdistribution_.MergeFrom(from.listmonitor_targetdistribution_);
  listmonitor_alivetargetcount_.MergeFrom(from.listmonitor_alivetargetcount_);
  listmessagesrcvdpertargetinfosourceandtype_.MergeFrom(from.listmessagesrcvdpertargetinfosourceandtype_);
  listtoxgssoftwarestatus_.MergeFrom(from.listtoxgssoftwarestatus_);
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.sequencenum() != 0) {
    set_sequencenum(from.sequencenum());
  }
  if (from.enum_sender_software() != 0) {
    set_enum_sender_software(from.enum_sender_software());
  }
  if (from.softwarestartedutctime() != 0) {
    set_softwarestartedutctime(from.softwarestartedutctime());
  }
  if (from.has_monitorprobe()) {
    mutable_monitorprobe()->::PBMonitor_Probe::MergeFrom(from.monitorprobe());
  }
  if (from.has_monitorprobeack()) {
    mutable_monitorprobeack()->::PBMonitor_ProbeAck::MergeFrom(from.monitorprobeack());
  }
}

void PBMonitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor::CopyFrom(const PBMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBMonitor::IsInitialized() const {

  return true;
}

void PBMonitor::Swap(PBMonitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor::InternalSwap(PBMonitor* other) {
  std::swap(recordutctime_, other->recordutctime_);
  std::swap(sequencenum_, other->sequencenum_);
  std::swap(enum_sender_software_, other->enum_sender_software_);
  std::swap(softwarestartedutctime_, other->softwarestartedutctime_);
  std::swap(monitorprobe_, other->monitorprobe_);
  std::swap(monitorprobeack_, other->monitorprobeack_);
  listmonitor_targetdistribution_.UnsafeArenaSwap(&other->listmonitor_targetdistribution_);
  listmonitor_alivetargetcount_.UnsafeArenaSwap(&other->listmonitor_alivetargetcount_);
  listmessagesrcvdpertargetinfosourceandtype_.UnsafeArenaSwap(&other->listmessagesrcvdpertargetinfosourceandtype_);
  listtoxgssoftwarestatus_.UnsafeArenaSwap(&other->listtoxgssoftwarestatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonitor_descriptor_;
  metadata.reflection = PBMonitor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMonitor

// optional uint32 recordUTCTime = 1;
void PBMonitor::clear_recordutctime() {
  recordutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor::recordutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor.recordUTCTime)
  return recordutctime_;
}
void PBMonitor::set_recordutctime(::google::protobuf::uint32 value) {
  
  recordutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor.recordUTCTime)
}

// optional uint32 sequenceNum = 2;
void PBMonitor::clear_sequencenum() {
  sequencenum_ = 0u;
}
::google::protobuf::uint32 PBMonitor::sequencenum() const {
  // @@protoc_insertion_point(field_get:PBMonitor.sequenceNum)
  return sequencenum_;
}
void PBMonitor::set_sequencenum(::google::protobuf::uint32 value) {
  
  sequencenum_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor.sequenceNum)
}

// optional .PB_Enum_Software enum_Sender_Software = 3;
void PBMonitor::clear_enum_sender_software() {
  enum_sender_software_ = 0;
}
::PB_Enum_Software PBMonitor::enum_sender_software() const {
  // @@protoc_insertion_point(field_get:PBMonitor.enum_Sender_Software)
  return static_cast< ::PB_Enum_Software >(enum_sender_software_);
}
void PBMonitor::set_enum_sender_software(::PB_Enum_Software value) {
  
  enum_sender_software_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor.enum_Sender_Software)
}

// optional uint32 softwareStartedUTCTime = 4;
void PBMonitor::clear_softwarestartedutctime() {
  softwarestartedutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor::softwarestartedutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor.softwareStartedUTCTime)
  return softwarestartedutctime_;
}
void PBMonitor::set_softwarestartedutctime(::google::protobuf::uint32 value) {
  
  softwarestartedutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor.softwareStartedUTCTime)
}

// optional .PBMonitor_Probe monitorProbe = 5;
bool PBMonitor::has_monitorprobe() const {
  return this != internal_default_instance() && monitorprobe_ != NULL;
}
void PBMonitor::clear_monitorprobe() {
  if (GetArenaNoVirtual() == NULL && monitorprobe_ != NULL) delete monitorprobe_;
  monitorprobe_ = NULL;
}
const ::PBMonitor_Probe& PBMonitor::monitorprobe() const {
  // @@protoc_insertion_point(field_get:PBMonitor.monitorProbe)
  return monitorprobe_ != NULL ? *monitorprobe_
                         : *::PBMonitor_Probe::internal_default_instance();
}
::PBMonitor_Probe* PBMonitor::mutable_monitorprobe() {
  
  if (monitorprobe_ == NULL) {
    monitorprobe_ = new ::PBMonitor_Probe;
  }
  // @@protoc_insertion_point(field_mutable:PBMonitor.monitorProbe)
  return monitorprobe_;
}
::PBMonitor_Probe* PBMonitor::release_monitorprobe() {
  // @@protoc_insertion_point(field_release:PBMonitor.monitorProbe)
  
  ::PBMonitor_Probe* temp = monitorprobe_;
  monitorprobe_ = NULL;
  return temp;
}
void PBMonitor::set_allocated_monitorprobe(::PBMonitor_Probe* monitorprobe) {
  delete monitorprobe_;
  monitorprobe_ = monitorprobe;
  if (monitorprobe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PBMonitor.monitorProbe)
}

// optional .PBMonitor_ProbeAck monitorProbeAck = 6;
bool PBMonitor::has_monitorprobeack() const {
  return this != internal_default_instance() && monitorprobeack_ != NULL;
}
void PBMonitor::clear_monitorprobeack() {
  if (GetArenaNoVirtual() == NULL && monitorprobeack_ != NULL) delete monitorprobeack_;
  monitorprobeack_ = NULL;
}
const ::PBMonitor_ProbeAck& PBMonitor::monitorprobeack() const {
  // @@protoc_insertion_point(field_get:PBMonitor.monitorProbeAck)
  return monitorprobeack_ != NULL ? *monitorprobeack_
                         : *::PBMonitor_ProbeAck::internal_default_instance();
}
::PBMonitor_ProbeAck* PBMonitor::mutable_monitorprobeack() {
  
  if (monitorprobeack_ == NULL) {
    monitorprobeack_ = new ::PBMonitor_ProbeAck;
  }
  // @@protoc_insertion_point(field_mutable:PBMonitor.monitorProbeAck)
  return monitorprobeack_;
}
::PBMonitor_ProbeAck* PBMonitor::release_monitorprobeack() {
  // @@protoc_insertion_point(field_release:PBMonitor.monitorProbeAck)
  
  ::PBMonitor_ProbeAck* temp = monitorprobeack_;
  monitorprobeack_ = NULL;
  return temp;
}
void PBMonitor::set_allocated_monitorprobeack(::PBMonitor_ProbeAck* monitorprobeack) {
  delete monitorprobeack_;
  monitorprobeack_ = monitorprobeack;
  if (monitorprobeack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PBMonitor.monitorProbeAck)
}

// repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
int PBMonitor::listmonitor_targetdistribution_size() const {
  return listmonitor_targetdistribution_.size();
}
void PBMonitor::clear_listmonitor_targetdistribution() {
  listmonitor_targetdistribution_.Clear();
}
const ::PBMonitor_TargetDistribution& PBMonitor::listmonitor_targetdistribution(int index) const {
  // @@protoc_insertion_point(field_get:PBMonitor.listMonitor_TargetDistribution)
  return listmonitor_targetdistribution_.Get(index);
}
::PBMonitor_TargetDistribution* PBMonitor::mutable_listmonitor_targetdistribution(int index) {
  // @@protoc_insertion_point(field_mutable:PBMonitor.listMonitor_TargetDistribution)
  return listmonitor_targetdistribution_.Mutable(index);
}
::PBMonitor_TargetDistribution* PBMonitor::add_listmonitor_targetdistribution() {
  // @@protoc_insertion_point(field_add:PBMonitor.listMonitor_TargetDistribution)
  return listmonitor_targetdistribution_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBMonitor_TargetDistribution >*
PBMonitor::mutable_listmonitor_targetdistribution() {
  // @@protoc_insertion_point(field_mutable_list:PBMonitor.listMonitor_TargetDistribution)
  return &listmonitor_targetdistribution_;
}
const ::google::protobuf::RepeatedPtrField< ::PBMonitor_TargetDistribution >&
PBMonitor::listmonitor_targetdistribution() const {
  // @@protoc_insertion_point(field_list:PBMonitor.listMonitor_TargetDistribution)
  return listmonitor_targetdistribution_;
}

// repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
int PBMonitor::listmonitor_alivetargetcount_size() const {
  return listmonitor_alivetargetcount_.size();
}
void PBMonitor::clear_listmonitor_alivetargetcount() {
  listmonitor_alivetargetcount_.Clear();
}
const ::PBMonitor_AliveTargetCount& PBMonitor::listmonitor_alivetargetcount(int index) const {
  // @@protoc_insertion_point(field_get:PBMonitor.listMonitor_AliveTargetCount)
  return listmonitor_alivetargetcount_.Get(index);
}
::PBMonitor_AliveTargetCount* PBMonitor::mutable_listmonitor_alivetargetcount(int index) {
  // @@protoc_insertion_point(field_mutable:PBMonitor.listMonitor_AliveTargetCount)
  return listmonitor_alivetargetcount_.Mutable(index);
}
::PBMonitor_AliveTargetCount* PBMonitor::add_listmonitor_alivetargetcount() {
  // @@protoc_insertion_point(field_add:PBMonitor.listMonitor_AliveTargetCount)
  return listmonitor_alivetargetcount_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBMonitor_AliveTargetCount >*
PBMonitor::mutable_listmonitor_alivetargetcount() {
  // @@protoc_insertion_point(field_mutable_list:PBMonitor.listMonitor_AliveTargetCount)
  return &listmonitor_alivetargetcount_;
}
const ::google::protobuf::RepeatedPtrField< ::PBMonitor_AliveTargetCount >&
PBMonitor::listmonitor_alivetargetcount() const {
  // @@protoc_insertion_point(field_list:PBMonitor.listMonitor_AliveTargetCount)
  return listmonitor_alivetargetcount_;
}

// repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
int PBMonitor::listmessagesrcvdpertargetinfosourceandtype_size() const {
  return listmessagesrcvdpertargetinfosourceandtype_.size();
}
void PBMonitor::clear_listmessagesrcvdpertargetinfosourceandtype() {
  listmessagesrcvdpertargetinfosourceandtype_.Clear();
}
const ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& PBMonitor::listmessagesrcvdpertargetinfosourceandtype(int index) const {
  // @@protoc_insertion_point(field_get:PBMonitor.listMessagesRcvdPerTargetInfoSourceAndType)
  return listmessagesrcvdpertargetinfosourceandtype_.Get(index);
}
::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* PBMonitor::mutable_listmessagesrcvdpertargetinfosourceandtype(int index) {
  // @@protoc_insertion_point(field_mutable:PBMonitor.listMessagesRcvdPerTargetInfoSourceAndType)
  return listmessagesrcvdpertargetinfosourceandtype_.Mutable(index);
}
::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* PBMonitor::add_listmessagesrcvdpertargetinfosourceandtype() {
  // @@protoc_insertion_point(field_add:PBMonitor.listMessagesRcvdPerTargetInfoSourceAndType)
  return listmessagesrcvdpertargetinfosourceandtype_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType >*
PBMonitor::mutable_listmessagesrcvdpertargetinfosourceandtype() {
  // @@protoc_insertion_point(field_mutable_list:PBMonitor.listMessagesRcvdPerTargetInfoSourceAndType)
  return &listmessagesrcvdpertargetinfosourceandtype_;
}
const ::google::protobuf::RepeatedPtrField< ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType >&
PBMonitor::listmessagesrcvdpertargetinfosourceandtype() const {
  // @@protoc_insertion_point(field_list:PBMonitor.listMessagesRcvdPerTargetInfoSourceAndType)
  return listmessagesrcvdpertargetinfosourceandtype_;
}

// repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
int PBMonitor::listtoxgssoftwarestatus_size() const {
  return listtoxgssoftwarestatus_.size();
}
void PBMonitor::clear_listtoxgssoftwarestatus() {
  listtoxgssoftwarestatus_.Clear();
}
const ::PBMonitor_ToXGS_SoftwareStatus& PBMonitor::listtoxgssoftwarestatus(int index) const {
  // @@protoc_insertion_point(field_get:PBMonitor.listToXGSSoftwareStatus)
  return listtoxgssoftwarestatus_.Get(index);
}
::PBMonitor_ToXGS_SoftwareStatus* PBMonitor::mutable_listtoxgssoftwarestatus(int index) {
  // @@protoc_insertion_point(field_mutable:PBMonitor.listToXGSSoftwareStatus)
  return listtoxgssoftwarestatus_.Mutable(index);
}
::PBMonitor_ToXGS_SoftwareStatus* PBMonitor::add_listtoxgssoftwarestatus() {
  // @@protoc_insertion_point(field_add:PBMonitor.listToXGSSoftwareStatus)
  return listtoxgssoftwarestatus_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBMonitor_ToXGS_SoftwareStatus >*
PBMonitor::mutable_listtoxgssoftwarestatus() {
  // @@protoc_insertion_point(field_mutable_list:PBMonitor.listToXGSSoftwareStatus)
  return &listtoxgssoftwarestatus_;
}
const ::google::protobuf::RepeatedPtrField< ::PBMonitor_ToXGS_SoftwareStatus >&
PBMonitor::listtoxgssoftwarestatus() const {
  // @@protoc_insertion_point(field_list:PBMonitor.listToXGSSoftwareStatus)
  return listtoxgssoftwarestatus_;
}

inline const PBMonitor* PBMonitor::internal_default_instance() {
  return &PBMonitor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_Probe::kRecordUTCTimeFieldNumber;
const int PBMonitor_Probe::kMonitorProbeSequenceNumFieldNumber;
const int PBMonitor_Probe::kStrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_Probe::PBMonitor_Probe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Monitor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_Probe)
}

void PBMonitor_Probe::InitAsDefaultInstance() {
}

PBMonitor_Probe::PBMonitor_Probe(const PBMonitor_Probe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMonitor_Probe)
}

void PBMonitor_Probe::SharedCtor() {
  strmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&recordutctime_, 0, reinterpret_cast<char*>(&monitorprobesequencenum_) -
    reinterpret_cast<char*>(&recordutctime_) + sizeof(monitorprobesequencenum_));
  _cached_size_ = 0;
}

PBMonitor_Probe::~PBMonitor_Probe() {
  // @@protoc_insertion_point(destructor:PBMonitor_Probe)
  SharedDtor();
}

void PBMonitor_Probe::SharedDtor() {
  strmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBMonitor_Probe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonitor_Probe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_Probe_descriptor_;
}

const PBMonitor_Probe& PBMonitor_Probe::default_instance() {
  protobuf_InitDefaults_Monitor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_Probe> PBMonitor_Probe_default_instance_;

PBMonitor_Probe* PBMonitor_Probe::New(::google::protobuf::Arena* arena) const {
  PBMonitor_Probe* n = new PBMonitor_Probe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMonitor_Probe::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_Probe)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PBMonitor_Probe, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMonitor_Probe*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recordutctime_, monitorprobesequencenum_);
  strmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PBMonitor_Probe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_Probe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recordUTCTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_monitorProbeSequenceNum;
        break;
      }

      // optional uint32 monitorProbeSequenceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_monitorProbeSequenceNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitorprobesequencenum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_strMsg;
        break;
      }

      // optional string strMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_strMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strmsg().data(), this->strmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMonitor_Probe.strMsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_Probe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_Probe)
  return false;
#undef DO_
}

void PBMonitor_Probe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_Probe)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // optional uint32 monitorProbeSequenceNum = 2;
  if (this->monitorprobesequencenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monitorprobesequencenum(), output);
  }

  // optional string strMsg = 3;
  if (this->strmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmsg().data(), this->strmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_Probe.strMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strmsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMonitor_Probe)
}

::google::protobuf::uint8* PBMonitor_Probe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_Probe)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // optional uint32 monitorProbeSequenceNum = 2;
  if (this->monitorprobesequencenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monitorprobesequencenum(), target);
  }

  // optional string strMsg = 3;
  if (this->strmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmsg().data(), this->strmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_Probe.strMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strmsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_Probe)
  return target;
}

size_t PBMonitor_Probe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_Probe)
  size_t total_size = 0;

  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // optional uint32 monitorProbeSequenceNum = 2;
  if (this->monitorprobesequencenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monitorprobesequencenum());
  }

  // optional string strMsg = 3;
  if (this->strmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strmsg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonitor_Probe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_Probe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMonitor_Probe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_Probe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_Probe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_Probe)
    UnsafeMergeFrom(*source);
  }
}

void PBMonitor_Probe::MergeFrom(const PBMonitor_Probe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_Probe)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBMonitor_Probe::UnsafeMergeFrom(const PBMonitor_Probe& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.monitorprobesequencenum() != 0) {
    set_monitorprobesequencenum(from.monitorprobesequencenum());
  }
  if (from.strmsg().size() > 0) {

    strmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmsg_);
  }
}

void PBMonitor_Probe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_Probe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_Probe::CopyFrom(const PBMonitor_Probe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_Probe)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBMonitor_Probe::IsInitialized() const {

  return true;
}

void PBMonitor_Probe::Swap(PBMonitor_Probe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_Probe::InternalSwap(PBMonitor_Probe* other) {
  std::swap(recordutctime_, other->recordutctime_);
  std::swap(monitorprobesequencenum_, other->monitorprobesequencenum_);
  strmsg_.Swap(&other->strmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMonitor_Probe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonitor_Probe_descriptor_;
  metadata.reflection = PBMonitor_Probe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMonitor_Probe

// optional uint32 recordUTCTime = 1;
void PBMonitor_Probe::clear_recordutctime() {
  recordutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor_Probe::recordutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor_Probe.recordUTCTime)
  return recordutctime_;
}
void PBMonitor_Probe::set_recordutctime(::google::protobuf::uint32 value) {
  
  recordutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_Probe.recordUTCTime)
}

// optional uint32 monitorProbeSequenceNum = 2;
void PBMonitor_Probe::clear_monitorprobesequencenum() {
  monitorprobesequencenum_ = 0u;
}
::google::protobuf::uint32 PBMonitor_Probe::monitorprobesequencenum() const {
  // @@protoc_insertion_point(field_get:PBMonitor_Probe.monitorProbeSequenceNum)
  return monitorprobesequencenum_;
}
void PBMonitor_Probe::set_monitorprobesequencenum(::google::protobuf::uint32 value) {
  
  monitorprobesequencenum_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_Probe.monitorProbeSequenceNum)
}

// optional string strMsg = 3;
void PBMonitor_Probe::clear_strmsg() {
  strmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PBMonitor_Probe::strmsg() const {
  // @@protoc_insertion_point(field_get:PBMonitor_Probe.strMsg)
  return strmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBMonitor_Probe::set_strmsg(const ::std::string& value) {
  
  strmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMonitor_Probe.strMsg)
}
void PBMonitor_Probe::set_strmsg(const char* value) {
  
  strmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMonitor_Probe.strMsg)
}
void PBMonitor_Probe::set_strmsg(const char* value, size_t size) {
  
  strmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMonitor_Probe.strMsg)
}
::std::string* PBMonitor_Probe::mutable_strmsg() {
  
  // @@protoc_insertion_point(field_mutable:PBMonitor_Probe.strMsg)
  return strmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PBMonitor_Probe::release_strmsg() {
  // @@protoc_insertion_point(field_release:PBMonitor_Probe.strMsg)
  
  return strmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBMonitor_Probe::set_allocated_strmsg(::std::string* strmsg) {
  if (strmsg != NULL) {
    
  } else {
    
  }
  strmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmsg);
  // @@protoc_insertion_point(field_set_allocated:PBMonitor_Probe.strMsg)
}

inline const PBMonitor_Probe* PBMonitor_Probe::internal_default_instance() {
  return &PBMonitor_Probe_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_ProbeAck::kRecordUTCTimeFieldNumber;
const int PBMonitor_ProbeAck::kEnumProbeSenderSoftwareFieldNumber;
const int PBMonitor_ProbeAck::kMonitorProbeSequenceNumAckedFieldNumber;
const int PBMonitor_ProbeAck::kTotalMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kOrigTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kValidOrigTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kPreprocessedTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kFusedTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kAnomalyMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kConfigMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kRequestMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kCommandMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kTotalMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kValidOrigTargetPositionsSentFieldNumber;
const int PBMonitor_ProbeAck::kPreprocessedTargetPositionsSentFieldNumber;
const int PBMonitor_ProbeAck::kFusedTargetPositionsSentFieldNumber;
const int PBMonitor_ProbeAck::kAnomalyMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kConfigMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kRequestMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kCommandMessagesSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_ProbeAck::PBMonitor_ProbeAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Monitor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_ProbeAck)
}

void PBMonitor_ProbeAck::InitAsDefaultInstance() {
}

PBMonitor_ProbeAck::PBMonitor_ProbeAck(const PBMonitor_ProbeAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMonitor_ProbeAck)
}

void PBMonitor_ProbeAck::SharedCtor() {
  ::memset(&recordutctime_, 0, reinterpret_cast<char*>(&commandmessagessent_) -
    reinterpret_cast<char*>(&recordutctime_) + sizeof(commandmessagessent_));
  _cached_size_ = 0;
}

PBMonitor_ProbeAck::~PBMonitor_ProbeAck() {
  // @@protoc_insertion_point(destructor:PBMonitor_ProbeAck)
  SharedDtor();
}

void PBMonitor_ProbeAck::SharedDtor() {
}

void PBMonitor_ProbeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonitor_ProbeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_ProbeAck_descriptor_;
}

const PBMonitor_ProbeAck& PBMonitor_ProbeAck::default_instance() {
  protobuf_InitDefaults_Monitor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_ProbeAck> PBMonitor_ProbeAck_default_instance_;

PBMonitor_ProbeAck* PBMonitor_ProbeAck::New(::google::protobuf::Arena* arena) const {
  PBMonitor_ProbeAck* n = new PBMonitor_ProbeAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMonitor_ProbeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_ProbeAck)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PBMonitor_ProbeAck, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMonitor_ProbeAck*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recordutctime_, monitorprobesequencenumacked_);
  ZR_(preprocessedtargetpositionsrcvd_, fusedtargetpositionsrcvd_);
  ZR_(anomalymessagesrcvd_, fusedtargetpositionssent_);
  configmessagesrcvd_ = 0u;
  ZR_(anomalymessagessent_, commandmessagessent_);

#undef ZR_HELPER_
#undef ZR_

}

bool PBMonitor_ProbeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_ProbeAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recordUTCTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enum_ProbeSender_Software;
        break;
      }

      // optional .PB_Enum_Software enum_ProbeSender_Software = 2;
      case 2: {
        if (tag == 16) {
         parse_enum_ProbeSender_Software:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_probesender_software(static_cast< ::PB_Enum_Software >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monitorProbeSequenceNumAcked;
        break;
      }

      // optional uint32 monitorProbeSequenceNumAcked = 3;
      case 3: {
        if (tag == 24) {
         parse_monitorProbeSequenceNumAcked:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitorprobesequencenumacked_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalMessagesRcvd;
        break;
      }

      // optional uint64 totalMessagesRcvd = 4;
      case 4: {
        if (tag == 32) {
         parse_totalMessagesRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_origTargetPositionsRcvd;
        break;
      }

      // optional uint64 origTargetPositionsRcvd = 5;
      case 5: {
        if (tag == 40) {
         parse_origTargetPositionsRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_validOrigTargetPositionsRcvd;
        break;
      }

      // optional uint64 validOrigTargetPositionsRcvd = 6;
      case 6: {
        if (tag == 48) {
         parse_validOrigTargetPositionsRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validorigtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_preprocessedTargetPositionsRcvd;
        break;
      }

      // optional uint64 preprocessedTargetPositionsRcvd = 7;
      case 7: {
        if (tag == 56) {
         parse_preprocessedTargetPositionsRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preprocessedtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fusedTargetPositionsRcvd;
        break;
      }

      // optional uint64 fusedTargetPositionsRcvd = 8;
      case 8: {
        if (tag == 64) {
         parse_fusedTargetPositionsRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fusedtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_anomalyMessagesRcvd;
        break;
      }

      // optional uint64 anomalyMessagesRcvd = 9;
      case 9: {
        if (tag == 72) {
         parse_anomalyMessagesRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anomalymessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_configMessagesRcvd;
        break;
      }

      // optional uint32 configMessagesRcvd = 10;
      case 10: {
        if (tag == 80) {
         parse_configMessagesRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_requestMessagesRcvd;
        break;
      }

      // optional uint32 requestMessagesRcvd = 11;
      case 11: {
        if (tag == 88) {
         parse_requestMessagesRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_commandMessagesRcvd;
        break;
      }

      // optional uint32 commandMessagesRcvd = 12;
      case 12: {
        if (tag == 96) {
         parse_commandMessagesRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_totalMessagesSent;
        break;
      }

      // optional uint64 totalMessagesSent = 13;
      case 13: {
        if (tag == 104) {
         parse_totalMessagesSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmessagessent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_validOrigTargetPositionsSent;
        break;
      }

      // optional uint64 validOrigTargetPositionsSent = 14;
      case 14: {
        if (tag == 112) {
         parse_validOrigTargetPositionsSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validorigtargetpositionssent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_preprocessedTargetPositionsSent;
        break;
      }

      // optional uint64 preprocessedTargetPositionsSent = 15;
      case 15: {
        if (tag == 120) {
         parse_preprocessedTargetPositionsSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preprocessedtargetpositionssent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_fusedTargetPositionsSent;
        break;
      }

      // optional uint64 fusedTargetPositionsSent = 16;
      case 16: {
        if (tag == 128) {
         parse_fusedTargetPositionsSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fusedtargetpositionssent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_anomalyMessagesSent;
        break;
      }

      // optional uint64 anomalyMessagesSent = 17;
      case 17: {
        if (tag == 136) {
         parse_anomalyMessagesSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anomalymessagessent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_configMessagesSent;
        break;
      }

      // optional uint32 configMessagesSent = 18;
      case 18: {
        if (tag == 144) {
         parse_configMessagesSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configmessagessent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_requestMessagesSent;
        break;
      }

      // optional uint32 requestMessagesSent = 19;
      case 19: {
        if (tag == 152) {
         parse_requestMessagesSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestmessagessent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_commandMessagesSent;
        break;
      }

      // optional uint32 commandMessagesSent = 20;
      case 20: {
        if (tag == 160) {
         parse_commandMessagesSent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandmessagessent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_ProbeAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_ProbeAck)
  return false;
#undef DO_
}

void PBMonitor_ProbeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_ProbeAck)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // optional .PB_Enum_Software enum_ProbeSender_Software = 2;
  if (this->enum_probesender_software() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->enum_probesender_software(), output);
  }

  // optional uint32 monitorProbeSequenceNumAcked = 3;
  if (this->monitorprobesequencenumacked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monitorprobesequencenumacked(), output);
  }

  // optional uint64 totalMessagesRcvd = 4;
  if (this->totalmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->totalmessagesrcvd(), output);
  }

  // optional uint64 origTargetPositionsRcvd = 5;
  if (this->origtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->origtargetpositionsrcvd(), output);
  }

  // optional uint64 validOrigTargetPositionsRcvd = 6;
  if (this->validorigtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->validorigtargetpositionsrcvd(), output);
  }

  // optional uint64 preprocessedTargetPositionsRcvd = 7;
  if (this->preprocessedtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->preprocessedtargetpositionsrcvd(), output);
  }

  // optional uint64 fusedTargetPositionsRcvd = 8;
  if (this->fusedtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fusedtargetpositionsrcvd(), output);
  }

  // optional uint64 anomalyMessagesRcvd = 9;
  if (this->anomalymessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->anomalymessagesrcvd(), output);
  }

  // optional uint32 configMessagesRcvd = 10;
  if (this->configmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->configmessagesrcvd(), output);
  }

  // optional uint32 requestMessagesRcvd = 11;
  if (this->requestmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->requestmessagesrcvd(), output);
  }

  // optional uint32 commandMessagesRcvd = 12;
  if (this->commandmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->commandmessagesrcvd(), output);
  }

  // optional uint64 totalMessagesSent = 13;
  if (this->totalmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->totalmessagessent(), output);
  }

  // optional uint64 validOrigTargetPositionsSent = 14;
  if (this->validorigtargetpositionssent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->validorigtargetpositionssent(), output);
  }

  // optional uint64 preprocessedTargetPositionsSent = 15;
  if (this->preprocessedtargetpositionssent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->preprocessedtargetpositionssent(), output);
  }

  // optional uint64 fusedTargetPositionsSent = 16;
  if (this->fusedtargetpositionssent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->fusedtargetpositionssent(), output);
  }

  // optional uint64 anomalyMessagesSent = 17;
  if (this->anomalymessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->anomalymessagessent(), output);
  }

  // optional uint32 configMessagesSent = 18;
  if (this->configmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->configmessagessent(), output);
  }

  // optional uint32 requestMessagesSent = 19;
  if (this->requestmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->requestmessagessent(), output);
  }

  // optional uint32 commandMessagesSent = 20;
  if (this->commandmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->commandmessagessent(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMonitor_ProbeAck)
}

::google::protobuf::uint8* PBMonitor_ProbeAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_ProbeAck)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // optional .PB_Enum_Software enum_ProbeSender_Software = 2;
  if (this->enum_probesender_software() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->enum_probesender_software(), target);
  }

  // optional uint32 monitorProbeSequenceNumAcked = 3;
  if (this->monitorprobesequencenumacked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monitorprobesequencenumacked(), target);
  }

  // optional uint64 totalMessagesRcvd = 4;
  if (this->totalmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->totalmessagesrcvd(), target);
  }

  // optional uint64 origTargetPositionsRcvd = 5;
  if (this->origtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->origtargetpositionsrcvd(), target);
  }

  // optional uint64 validOrigTargetPositionsRcvd = 6;
  if (this->validorigtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->validorigtargetpositionsrcvd(), target);
  }

  // optional uint64 preprocessedTargetPositionsRcvd = 7;
  if (this->preprocessedtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->preprocessedtargetpositionsrcvd(), target);
  }

  // optional uint64 fusedTargetPositionsRcvd = 8;
  if (this->fusedtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fusedtargetpositionsrcvd(), target);
  }

  // optional uint64 anomalyMessagesRcvd = 9;
  if (this->anomalymessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->anomalymessagesrcvd(), target);
  }

  // optional uint32 configMessagesRcvd = 10;
  if (this->configmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->configmessagesrcvd(), target);
  }

  // optional uint32 requestMessagesRcvd = 11;
  if (this->requestmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->requestmessagesrcvd(), target);
  }

  // optional uint32 commandMessagesRcvd = 12;
  if (this->commandmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->commandmessagesrcvd(), target);
  }

  // optional uint64 totalMessagesSent = 13;
  if (this->totalmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->totalmessagessent(), target);
  }

  // optional uint64 validOrigTargetPositionsSent = 14;
  if (this->validorigtargetpositionssent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->validorigtargetpositionssent(), target);
  }

  // optional uint64 preprocessedTargetPositionsSent = 15;
  if (this->preprocessedtargetpositionssent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->preprocessedtargetpositionssent(), target);
  }

  // optional uint64 fusedTargetPositionsSent = 16;
  if (this->fusedtargetpositionssent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->fusedtargetpositionssent(), target);
  }

  // optional uint64 anomalyMessagesSent = 17;
  if (this->anomalymessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->anomalymessagessent(), target);
  }

  // optional uint32 configMessagesSent = 18;
  if (this->configmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->configmessagessent(), target);
  }

  // optional uint32 requestMessagesSent = 19;
  if (this->requestmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->requestmessagessent(), target);
  }

  // optional uint32 commandMessagesSent = 20;
  if (this->commandmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->commandmessagessent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_ProbeAck)
  return target;
}

size_t PBMonitor_ProbeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_ProbeAck)
  size_t total_size = 0;

  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // optional .PB_Enum_Software enum_ProbeSender_Software = 2;
  if (this->enum_probesender_software() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_probesender_software());
  }

  // optional uint32 monitorProbeSequenceNumAcked = 3;
  if (this->monitorprobesequencenumacked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monitorprobesequencenumacked());
  }

  // optional uint64 totalMessagesRcvd = 4;
  if (this->totalmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalmessagesrcvd());
  }

  // optional uint64 origTargetPositionsRcvd = 5;
  if (this->origtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->origtargetpositionsrcvd());
  }

  // optional uint64 validOrigTargetPositionsRcvd = 6;
  if (this->validorigtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validorigtargetpositionsrcvd());
  }

  // optional uint64 preprocessedTargetPositionsRcvd = 7;
  if (this->preprocessedtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->preprocessedtargetpositionsrcvd());
  }

  // optional uint64 fusedTargetPositionsRcvd = 8;
  if (this->fusedtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fusedtargetpositionsrcvd());
  }

  // optional uint64 anomalyMessagesRcvd = 9;
  if (this->anomalymessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->anomalymessagesrcvd());
  }

  // optional uint32 configMessagesRcvd = 10;
  if (this->configmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->configmessagesrcvd());
  }

  // optional uint32 requestMessagesRcvd = 11;
  if (this->requestmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestmessagesrcvd());
  }

  // optional uint32 commandMessagesRcvd = 12;
  if (this->commandmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commandmessagesrcvd());
  }

  // optional uint64 totalMessagesSent = 13;
  if (this->totalmessagessent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalmessagessent());
  }

  // optional uint64 validOrigTargetPositionsSent = 14;
  if (this->validorigtargetpositionssent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validorigtargetpositionssent());
  }

  // optional uint64 preprocessedTargetPositionsSent = 15;
  if (this->preprocessedtargetpositionssent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->preprocessedtargetpositionssent());
  }

  // optional uint64 fusedTargetPositionsSent = 16;
  if (this->fusedtargetpositionssent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fusedtargetpositionssent());
  }

  // optional uint64 anomalyMessagesSent = 17;
  if (this->anomalymessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->anomalymessagessent());
  }

  // optional uint32 configMessagesSent = 18;
  if (this->configmessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->configmessagessent());
  }

  // optional uint32 requestMessagesSent = 19;
  if (this->requestmessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestmessagessent());
  }

  // optional uint32 commandMessagesSent = 20;
  if (this->commandmessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commandmessagessent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonitor_ProbeAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_ProbeAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMonitor_ProbeAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_ProbeAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_ProbeAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_ProbeAck)
    UnsafeMergeFrom(*source);
  }
}

void PBMonitor_ProbeAck::MergeFrom(const PBMonitor_ProbeAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_ProbeAck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBMonitor_ProbeAck::UnsafeMergeFrom(const PBMonitor_ProbeAck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.enum_probesender_software() != 0) {
    set_enum_probesender_software(from.enum_probesender_software());
  }
  if (from.monitorprobesequencenumacked() != 0) {
    set_monitorprobesequencenumacked(from.monitorprobesequencenumacked());
  }
  if (from.totalmessagesrcvd() != 0) {
    set_totalmessagesrcvd(from.totalmessagesrcvd());
  }
  if (from.origtargetpositionsrcvd() != 0) {
    set_origtargetpositionsrcvd(from.origtargetpositionsrcvd());
  }
  if (from.validorigtargetpositionsrcvd() != 0) {
    set_validorigtargetpositionsrcvd(from.validorigtargetpositionsrcvd());
  }
  if (from.preprocessedtargetpositionsrcvd() != 0) {
    set_preprocessedtargetpositionsrcvd(from.preprocessedtargetpositionsrcvd());
  }
  if (from.fusedtargetpositionsrcvd() != 0) {
    set_fusedtargetpositionsrcvd(from.fusedtargetpositionsrcvd());
  }
  if (from.anomalymessagesrcvd() != 0) {
    set_anomalymessagesrcvd(from.anomalymessagesrcvd());
  }
  if (from.configmessagesrcvd() != 0) {
    set_configmessagesrcvd(from.configmessagesrcvd());
  }
  if (from.requestmessagesrcvd() != 0) {
    set_requestmessagesrcvd(from.requestmessagesrcvd());
  }
  if (from.commandmessagesrcvd() != 0) {
    set_commandmessagesrcvd(from.commandmessagesrcvd());
  }
  if (from.totalmessagessent() != 0) {
    set_totalmessagessent(from.totalmessagessent());
  }
  if (from.validorigtargetpositionssent() != 0) {
    set_validorigtargetpositionssent(from.validorigtargetpositionssent());
  }
  if (from.preprocessedtargetpositionssent() != 0) {
    set_preprocessedtargetpositionssent(from.preprocessedtargetpositionssent());
  }
  if (from.fusedtargetpositionssent() != 0) {
    set_fusedtargetpositionssent(from.fusedtargetpositionssent());
  }
  if (from.anomalymessagessent() != 0) {
    set_anomalymessagessent(from.anomalymessagessent());
  }
  if (from.configmessagessent() != 0) {
    set_configmessagessent(from.configmessagessent());
  }
  if (from.requestmessagessent() != 0) {
    set_requestmessagessent(from.requestmessagessent());
  }
  if (from.commandmessagessent() != 0) {
    set_commandmessagessent(from.commandmessagessent());
  }
}

void PBMonitor_ProbeAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_ProbeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_ProbeAck::CopyFrom(const PBMonitor_ProbeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_ProbeAck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBMonitor_ProbeAck::IsInitialized() const {

  return true;
}

void PBMonitor_ProbeAck::Swap(PBMonitor_ProbeAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_ProbeAck::InternalSwap(PBMonitor_ProbeAck* other) {
  std::swap(recordutctime_, other->recordutctime_);
  std::swap(enum_probesender_software_, other->enum_probesender_software_);
  std::swap(monitorprobesequencenumacked_, other->monitorprobesequencenumacked_);
  std::swap(totalmessagesrcvd_, other->totalmessagesrcvd_);
  std::swap(origtargetpositionsrcvd_, other->origtargetpositionsrcvd_);
  std::swap(validorigtargetpositionsrcvd_, other->validorigtargetpositionsrcvd_);
  std::swap(preprocessedtargetpositionsrcvd_, other->preprocessedtargetpositionsrcvd_);
  std::swap(fusedtargetpositionsrcvd_, other->fusedtargetpositionsrcvd_);
  std::swap(anomalymessagesrcvd_, other->anomalymessagesrcvd_);
  std::swap(configmessagesrcvd_, other->configmessagesrcvd_);
  std::swap(requestmessagesrcvd_, other->requestmessagesrcvd_);
  std::swap(commandmessagesrcvd_, other->commandmessagesrcvd_);
  std::swap(totalmessagessent_, other->totalmessagessent_);
  std::swap(validorigtargetpositionssent_, other->validorigtargetpositionssent_);
  std::swap(preprocessedtargetpositionssent_, other->preprocessedtargetpositionssent_);
  std::swap(fusedtargetpositionssent_, other->fusedtargetpositionssent_);
  std::swap(anomalymessagessent_, other->anomalymessagessent_);
  std::swap(configmessagessent_, other->configmessagessent_);
  std::swap(requestmessagessent_, other->requestmessagessent_);
  std::swap(commandmessagessent_, other->commandmessagessent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMonitor_ProbeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonitor_ProbeAck_descriptor_;
  metadata.reflection = PBMonitor_ProbeAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMonitor_ProbeAck

// optional uint32 recordUTCTime = 1;
void PBMonitor_ProbeAck::clear_recordutctime() {
  recordutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::recordutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.recordUTCTime)
  return recordutctime_;
}
void PBMonitor_ProbeAck::set_recordutctime(::google::protobuf::uint32 value) {
  
  recordutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.recordUTCTime)
}

// optional .PB_Enum_Software enum_ProbeSender_Software = 2;
void PBMonitor_ProbeAck::clear_enum_probesender_software() {
  enum_probesender_software_ = 0;
}
::PB_Enum_Software PBMonitor_ProbeAck::enum_probesender_software() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.enum_ProbeSender_Software)
  return static_cast< ::PB_Enum_Software >(enum_probesender_software_);
}
void PBMonitor_ProbeAck::set_enum_probesender_software(::PB_Enum_Software value) {
  
  enum_probesender_software_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.enum_ProbeSender_Software)
}

// optional uint32 monitorProbeSequenceNumAcked = 3;
void PBMonitor_ProbeAck::clear_monitorprobesequencenumacked() {
  monitorprobesequencenumacked_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::monitorprobesequencenumacked() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.monitorProbeSequenceNumAcked)
  return monitorprobesequencenumacked_;
}
void PBMonitor_ProbeAck::set_monitorprobesequencenumacked(::google::protobuf::uint32 value) {
  
  monitorprobesequencenumacked_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.monitorProbeSequenceNumAcked)
}

// optional uint64 totalMessagesRcvd = 4;
void PBMonitor_ProbeAck::clear_totalmessagesrcvd() {
  totalmessagesrcvd_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::totalmessagesrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.totalMessagesRcvd)
  return totalmessagesrcvd_;
}
void PBMonitor_ProbeAck::set_totalmessagesrcvd(::google::protobuf::uint64 value) {
  
  totalmessagesrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.totalMessagesRcvd)
}

// optional uint64 origTargetPositionsRcvd = 5;
void PBMonitor_ProbeAck::clear_origtargetpositionsrcvd() {
  origtargetpositionsrcvd_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::origtargetpositionsrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.origTargetPositionsRcvd)
  return origtargetpositionsrcvd_;
}
void PBMonitor_ProbeAck::set_origtargetpositionsrcvd(::google::protobuf::uint64 value) {
  
  origtargetpositionsrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.origTargetPositionsRcvd)
}

// optional uint64 validOrigTargetPositionsRcvd = 6;
void PBMonitor_ProbeAck::clear_validorigtargetpositionsrcvd() {
  validorigtargetpositionsrcvd_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::validorigtargetpositionsrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.validOrigTargetPositionsRcvd)
  return validorigtargetpositionsrcvd_;
}
void PBMonitor_ProbeAck::set_validorigtargetpositionsrcvd(::google::protobuf::uint64 value) {
  
  validorigtargetpositionsrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.validOrigTargetPositionsRcvd)
}

// optional uint64 preprocessedTargetPositionsRcvd = 7;
void PBMonitor_ProbeAck::clear_preprocessedtargetpositionsrcvd() {
  preprocessedtargetpositionsrcvd_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::preprocessedtargetpositionsrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.preprocessedTargetPositionsRcvd)
  return preprocessedtargetpositionsrcvd_;
}
void PBMonitor_ProbeAck::set_preprocessedtargetpositionsrcvd(::google::protobuf::uint64 value) {
  
  preprocessedtargetpositionsrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.preprocessedTargetPositionsRcvd)
}

// optional uint64 fusedTargetPositionsRcvd = 8;
void PBMonitor_ProbeAck::clear_fusedtargetpositionsrcvd() {
  fusedtargetpositionsrcvd_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::fusedtargetpositionsrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.fusedTargetPositionsRcvd)
  return fusedtargetpositionsrcvd_;
}
void PBMonitor_ProbeAck::set_fusedtargetpositionsrcvd(::google::protobuf::uint64 value) {
  
  fusedtargetpositionsrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.fusedTargetPositionsRcvd)
}

// optional uint64 anomalyMessagesRcvd = 9;
void PBMonitor_ProbeAck::clear_anomalymessagesrcvd() {
  anomalymessagesrcvd_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::anomalymessagesrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.anomalyMessagesRcvd)
  return anomalymessagesrcvd_;
}
void PBMonitor_ProbeAck::set_anomalymessagesrcvd(::google::protobuf::uint64 value) {
  
  anomalymessagesrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.anomalyMessagesRcvd)
}

// optional uint32 configMessagesRcvd = 10;
void PBMonitor_ProbeAck::clear_configmessagesrcvd() {
  configmessagesrcvd_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::configmessagesrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.configMessagesRcvd)
  return configmessagesrcvd_;
}
void PBMonitor_ProbeAck::set_configmessagesrcvd(::google::protobuf::uint32 value) {
  
  configmessagesrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.configMessagesRcvd)
}

// optional uint32 requestMessagesRcvd = 11;
void PBMonitor_ProbeAck::clear_requestmessagesrcvd() {
  requestmessagesrcvd_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::requestmessagesrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.requestMessagesRcvd)
  return requestmessagesrcvd_;
}
void PBMonitor_ProbeAck::set_requestmessagesrcvd(::google::protobuf::uint32 value) {
  
  requestmessagesrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.requestMessagesRcvd)
}

// optional uint32 commandMessagesRcvd = 12;
void PBMonitor_ProbeAck::clear_commandmessagesrcvd() {
  commandmessagesrcvd_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::commandmessagesrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.commandMessagesRcvd)
  return commandmessagesrcvd_;
}
void PBMonitor_ProbeAck::set_commandmessagesrcvd(::google::protobuf::uint32 value) {
  
  commandmessagesrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.commandMessagesRcvd)
}

// optional uint64 totalMessagesSent = 13;
void PBMonitor_ProbeAck::clear_totalmessagessent() {
  totalmessagessent_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::totalmessagessent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.totalMessagesSent)
  return totalmessagessent_;
}
void PBMonitor_ProbeAck::set_totalmessagessent(::google::protobuf::uint64 value) {
  
  totalmessagessent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.totalMessagesSent)
}

// optional uint64 validOrigTargetPositionsSent = 14;
void PBMonitor_ProbeAck::clear_validorigtargetpositionssent() {
  validorigtargetpositionssent_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::validorigtargetpositionssent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.validOrigTargetPositionsSent)
  return validorigtargetpositionssent_;
}
void PBMonitor_ProbeAck::set_validorigtargetpositionssent(::google::protobuf::uint64 value) {
  
  validorigtargetpositionssent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.validOrigTargetPositionsSent)
}

// optional uint64 preprocessedTargetPositionsSent = 15;
void PBMonitor_ProbeAck::clear_preprocessedtargetpositionssent() {
  preprocessedtargetpositionssent_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::preprocessedtargetpositionssent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.preprocessedTargetPositionsSent)
  return preprocessedtargetpositionssent_;
}
void PBMonitor_ProbeAck::set_preprocessedtargetpositionssent(::google::protobuf::uint64 value) {
  
  preprocessedtargetpositionssent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.preprocessedTargetPositionsSent)
}

// optional uint64 fusedTargetPositionsSent = 16;
void PBMonitor_ProbeAck::clear_fusedtargetpositionssent() {
  fusedtargetpositionssent_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::fusedtargetpositionssent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.fusedTargetPositionsSent)
  return fusedtargetpositionssent_;
}
void PBMonitor_ProbeAck::set_fusedtargetpositionssent(::google::protobuf::uint64 value) {
  
  fusedtargetpositionssent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.fusedTargetPositionsSent)
}

// optional uint64 anomalyMessagesSent = 17;
void PBMonitor_ProbeAck::clear_anomalymessagessent() {
  anomalymessagessent_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_ProbeAck::anomalymessagessent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.anomalyMessagesSent)
  return anomalymessagessent_;
}
void PBMonitor_ProbeAck::set_anomalymessagessent(::google::protobuf::uint64 value) {
  
  anomalymessagessent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.anomalyMessagesSent)
}

// optional uint32 configMessagesSent = 18;
void PBMonitor_ProbeAck::clear_configmessagessent() {
  configmessagessent_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::configmessagessent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.configMessagesSent)
  return configmessagessent_;
}
void PBMonitor_ProbeAck::set_configmessagessent(::google::protobuf::uint32 value) {
  
  configmessagessent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.configMessagesSent)
}

// optional uint32 requestMessagesSent = 19;
void PBMonitor_ProbeAck::clear_requestmessagessent() {
  requestmessagessent_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::requestmessagessent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.requestMessagesSent)
  return requestmessagessent_;
}
void PBMonitor_ProbeAck::set_requestmessagessent(::google::protobuf::uint32 value) {
  
  requestmessagessent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.requestMessagesSent)
}

// optional uint32 commandMessagesSent = 20;
void PBMonitor_ProbeAck::clear_commandmessagessent() {
  commandmessagessent_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ProbeAck::commandmessagessent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ProbeAck.commandMessagesSent)
  return commandmessagessent_;
}
void PBMonitor_ProbeAck::set_commandmessagessent(::google::protobuf::uint32 value) {
  
  commandmessagessent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ProbeAck.commandMessagesSent)
}

inline const PBMonitor_ProbeAck* PBMonitor_ProbeAck::internal_default_instance() {
  return &PBMonitor_ProbeAck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus_descriptor_;
}
bool PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::EV_XGS_SoftwareStatus_NA;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::EV_XGS_SoftwareStatus_Normal;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::EV_XGS_SoftwareStatus_Error;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::PB_Enum_XGS_SoftwareStatus_MIN;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::PB_Enum_XGS_SoftwareStatus_MAX;
const int PBMonitor_ToXGS_SoftwareStatus::PB_Enum_XGS_SoftwareStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_ToXGS_SoftwareStatus::kRecordUTCTimeFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysXGSHJFFStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysZHCLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysXXFenXiStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysYWGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysSJGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXXZHCLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXXGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXXFenFaStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleJKTJStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleWJFXStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleYCGJStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXTJKStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleYHQXGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleSJYYGLWHStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleSJKYXZTJKStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleSJBFHFStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleJRYCLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kErrorDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_ToXGS_SoftwareStatus::PBMonitor_ToXGS_SoftwareStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Monitor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_ToXGS_SoftwareStatus)
}

void PBMonitor_ToXGS_SoftwareStatus::InitAsDefaultInstance() {
}

PBMonitor_ToXGS_SoftwareStatus::PBMonitor_ToXGS_SoftwareStatus(const PBMonitor_ToXGS_SoftwareStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMonitor_ToXGS_SoftwareStatus)
}

void PBMonitor_ToXGS_SoftwareStatus::SharedCtor() {
  errordescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&recordutctime_, 0, reinterpret_cast<char*>(&module_jrycl_status_) -
    reinterpret_cast<char*>(&recordutctime_) + sizeof(module_jrycl_status_));
  _cached_size_ = 0;
}

PBMonitor_ToXGS_SoftwareStatus::~PBMonitor_ToXGS_SoftwareStatus() {
  // @@protoc_insertion_point(destructor:PBMonitor_ToXGS_SoftwareStatus)
  SharedDtor();
}

void PBMonitor_ToXGS_SoftwareStatus::SharedDtor() {
  errordescription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBMonitor_ToXGS_SoftwareStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonitor_ToXGS_SoftwareStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_ToXGS_SoftwareStatus_descriptor_;
}

const PBMonitor_ToXGS_SoftwareStatus& PBMonitor_ToXGS_SoftwareStatus::default_instance() {
  protobuf_InitDefaults_Monitor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_ToXGS_SoftwareStatus> PBMonitor_ToXGS_SoftwareStatus_default_instance_;

PBMonitor_ToXGS_SoftwareStatus* PBMonitor_ToXGS_SoftwareStatus::New(::google::protobuf::Arena* arena) const {
  PBMonitor_ToXGS_SoftwareStatus* n = new PBMonitor_ToXGS_SoftwareStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMonitor_ToXGS_SoftwareStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_ToXGS_SoftwareStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PBMonitor_ToXGS_SoftwareStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMonitor_ToXGS_SoftwareStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recordutctime_, module_xxgl_status_);
  ZR_(module_xxfenfa_status_, module_sjkyxztjk_status_);
  ZR_(module_sjbfhf_status_, module_jrycl_status_);
  errordescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PBMonitor_ToXGS_SoftwareStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_ToXGS_SoftwareStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recordUTCTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Subsys_XGS_HJFF_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Subsys_XGS_HJFF_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_xgs_hjff_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Subsys_ZHCL_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
      case 3: {
        if (tag == 24) {
         parse_Subsys_ZHCL_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_zhcl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Subsys_XXFenXi_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
      case 4: {
        if (tag == 32) {
         parse_Subsys_XXFenXi_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_xxfenxi_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Subsys_YWGL_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
      case 5: {
        if (tag == 40) {
         parse_Subsys_YWGL_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_ywgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Subsys_SJGL_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
      case 6: {
        if (tag == 48) {
         parse_Subsys_SJGL_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_sjgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Module_XXZHCL_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
      case 7: {
        if (tag == 56) {
         parse_Module_XXZHCL_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xxzhcl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Module_XXGL_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
      case 8: {
        if (tag == 64) {
         parse_Module_XXGL_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xxgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Module_XXFenFa_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
      case 9: {
        if (tag == 72) {
         parse_Module_XXFenFa_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xxfenfa_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Module_JKTJ_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
      case 10: {
        if (tag == 80) {
         parse_Module_JKTJ_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_jktj_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Module_WJFX_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
      case 11: {
        if (tag == 88) {
         parse_Module_WJFX_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_wjfx_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Module_YCGJ_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
      case 12: {
        if (tag == 96) {
         parse_Module_YCGJ_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_ycgj_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Module_XTJK_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
      case 13: {
        if (tag == 104) {
         parse_Module_XTJK_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xtjk_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Module_YHQXGL_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
      case 14: {
        if (tag == 112) {
         parse_Module_YHQXGL_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_yhqxgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Module_SJYYGLWH_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
      case 15: {
        if (tag == 120) {
         parse_Module_SJYYGLWH_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_sjyyglwh_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_Module_SJKYXZTJK_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
      case 16: {
        if (tag == 128) {
         parse_Module_SJKYXZTJK_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_sjkyxztjk_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Module_SJBFHF_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
      case 17: {
        if (tag == 136) {
         parse_Module_SJBFHF_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_sjbfhf_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Module_JRYCL_Status;
        break;
      }

      // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
      case 18: {
        if (tag == 144) {
         parse_Module_JRYCL_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_jrycl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_errorDescription;
        break;
      }

      // optional string errorDescription = 19;
      case 19: {
        if (tag == 154) {
         parse_errorDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordescription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errordescription().data(), this->errordescription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMonitor_ToXGS_SoftwareStatus.errorDescription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_ToXGS_SoftwareStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_ToXGS_SoftwareStatus)
  return false;
#undef DO_
}

void PBMonitor_ToXGS_SoftwareStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_ToXGS_SoftwareStatus)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
  if (this->subsys_xgs_hjff_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->subsys_xgs_hjff_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
  if (this->subsys_zhcl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subsys_zhcl_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
  if (this->subsys_xxfenxi_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->subsys_xxfenxi_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
  if (this->subsys_ywgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->subsys_ywgl_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
  if (this->subsys_sjgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->subsys_sjgl_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
  if (this->module_xxzhcl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->module_xxzhcl_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
  if (this->module_xxgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->module_xxgl_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
  if (this->module_xxfenfa_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->module_xxfenfa_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
  if (this->module_jktj_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->module_jktj_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
  if (this->module_wjfx_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->module_wjfx_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
  if (this->module_ycgj_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->module_ycgj_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
  if (this->module_xtjk_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->module_xtjk_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
  if (this->module_yhqxgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->module_yhqxgl_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
  if (this->module_sjyyglwh_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->module_sjyyglwh_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
  if (this->module_sjkyxztjk_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->module_sjkyxztjk_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
  if (this->module_sjbfhf_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->module_sjbfhf_status(), output);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
  if (this->module_jrycl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->module_jrycl_status(), output);
  }

  // optional string errorDescription = 19;
  if (this->errordescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errordescription().data(), this->errordescription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_ToXGS_SoftwareStatus.errorDescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->errordescription(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMonitor_ToXGS_SoftwareStatus)
}

::google::protobuf::uint8* PBMonitor_ToXGS_SoftwareStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_ToXGS_SoftwareStatus)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
  if (this->subsys_xgs_hjff_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->subsys_xgs_hjff_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
  if (this->subsys_zhcl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subsys_zhcl_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
  if (this->subsys_xxfenxi_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->subsys_xxfenxi_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
  if (this->subsys_ywgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->subsys_ywgl_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
  if (this->subsys_sjgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->subsys_sjgl_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
  if (this->module_xxzhcl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->module_xxzhcl_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
  if (this->module_xxgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->module_xxgl_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
  if (this->module_xxfenfa_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->module_xxfenfa_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
  if (this->module_jktj_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->module_jktj_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
  if (this->module_wjfx_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->module_wjfx_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
  if (this->module_ycgj_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->module_ycgj_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
  if (this->module_xtjk_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->module_xtjk_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
  if (this->module_yhqxgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->module_yhqxgl_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
  if (this->module_sjyyglwh_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->module_sjyyglwh_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
  if (this->module_sjkyxztjk_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->module_sjkyxztjk_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
  if (this->module_sjbfhf_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->module_sjbfhf_status(), target);
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
  if (this->module_jrycl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->module_jrycl_status(), target);
  }

  // optional string errorDescription = 19;
  if (this->errordescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errordescription().data(), this->errordescription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_ToXGS_SoftwareStatus.errorDescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->errordescription(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_ToXGS_SoftwareStatus)
  return target;
}

size_t PBMonitor_ToXGS_SoftwareStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_ToXGS_SoftwareStatus)
  size_t total_size = 0;

  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
  if (this->subsys_xgs_hjff_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_xgs_hjff_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
  if (this->subsys_zhcl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_zhcl_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
  if (this->subsys_xxfenxi_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_xxfenxi_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
  if (this->subsys_ywgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_ywgl_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
  if (this->subsys_sjgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_sjgl_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
  if (this->module_xxzhcl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xxzhcl_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
  if (this->module_xxgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xxgl_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
  if (this->module_xxfenfa_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xxfenfa_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
  if (this->module_jktj_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_jktj_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
  if (this->module_wjfx_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_wjfx_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
  if (this->module_ycgj_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_ycgj_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
  if (this->module_xtjk_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xtjk_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
  if (this->module_yhqxgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_yhqxgl_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
  if (this->module_sjyyglwh_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_sjyyglwh_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
  if (this->module_sjkyxztjk_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_sjkyxztjk_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
  if (this->module_sjbfhf_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_sjbfhf_status());
  }

  // optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
  if (this->module_jrycl_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_jrycl_status());
  }

  // optional string errorDescription = 19;
  if (this->errordescription().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errordescription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonitor_ToXGS_SoftwareStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_ToXGS_SoftwareStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMonitor_ToXGS_SoftwareStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_ToXGS_SoftwareStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_ToXGS_SoftwareStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_ToXGS_SoftwareStatus)
    UnsafeMergeFrom(*source);
  }
}

void PBMonitor_ToXGS_SoftwareStatus::MergeFrom(const PBMonitor_ToXGS_SoftwareStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_ToXGS_SoftwareStatus)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBMonitor_ToXGS_SoftwareStatus::UnsafeMergeFrom(const PBMonitor_ToXGS_SoftwareStatus& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.subsys_xgs_hjff_status() != 0) {
    set_subsys_xgs_hjff_status(from.subsys_xgs_hjff_status());
  }
  if (from.subsys_zhcl_status() != 0) {
    set_subsys_zhcl_status(from.subsys_zhcl_status());
  }
  if (from.subsys_xxfenxi_status() != 0) {
    set_subsys_xxfenxi_status(from.subsys_xxfenxi_status());
  }
  if (from.subsys_ywgl_status() != 0) {
    set_subsys_ywgl_status(from.subsys_ywgl_status());
  }
  if (from.subsys_sjgl_status() != 0) {
    set_subsys_sjgl_status(from.subsys_sjgl_status());
  }
  if (from.module_xxzhcl_status() != 0) {
    set_module_xxzhcl_status(from.module_xxzhcl_status());
  }
  if (from.module_xxgl_status() != 0) {
    set_module_xxgl_status(from.module_xxgl_status());
  }
  if (from.module_xxfenfa_status() != 0) {
    set_module_xxfenfa_status(from.module_xxfenfa_status());
  }
  if (from.module_jktj_status() != 0) {
    set_module_jktj_status(from.module_jktj_status());
  }
  if (from.module_wjfx_status() != 0) {
    set_module_wjfx_status(from.module_wjfx_status());
  }
  if (from.module_ycgj_status() != 0) {
    set_module_ycgj_status(from.module_ycgj_status());
  }
  if (from.module_xtjk_status() != 0) {
    set_module_xtjk_status(from.module_xtjk_status());
  }
  if (from.module_yhqxgl_status() != 0) {
    set_module_yhqxgl_status(from.module_yhqxgl_status());
  }
  if (from.module_sjyyglwh_status() != 0) {
    set_module_sjyyglwh_status(from.module_sjyyglwh_status());
  }
  if (from.module_sjkyxztjk_status() != 0) {
    set_module_sjkyxztjk_status(from.module_sjkyxztjk_status());
  }
  if (from.module_sjbfhf_status() != 0) {
    set_module_sjbfhf_status(from.module_sjbfhf_status());
  }
  if (from.module_jrycl_status() != 0) {
    set_module_jrycl_status(from.module_jrycl_status());
  }
  if (from.errordescription().size() > 0) {

    errordescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
  }
}

void PBMonitor_ToXGS_SoftwareStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_ToXGS_SoftwareStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_ToXGS_SoftwareStatus::CopyFrom(const PBMonitor_ToXGS_SoftwareStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_ToXGS_SoftwareStatus)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBMonitor_ToXGS_SoftwareStatus::IsInitialized() const {

  return true;
}

void PBMonitor_ToXGS_SoftwareStatus::Swap(PBMonitor_ToXGS_SoftwareStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_ToXGS_SoftwareStatus::InternalSwap(PBMonitor_ToXGS_SoftwareStatus* other) {
  std::swap(recordutctime_, other->recordutctime_);
  std::swap(subsys_xgs_hjff_status_, other->subsys_xgs_hjff_status_);
  std::swap(subsys_zhcl_status_, other->subsys_zhcl_status_);
  std::swap(subsys_xxfenxi_status_, other->subsys_xxfenxi_status_);
  std::swap(subsys_ywgl_status_, other->subsys_ywgl_status_);
  std::swap(subsys_sjgl_status_, other->subsys_sjgl_status_);
  std::swap(module_xxzhcl_status_, other->module_xxzhcl_status_);
  std::swap(module_xxgl_status_, other->module_xxgl_status_);
  std::swap(module_xxfenfa_status_, other->module_xxfenfa_status_);
  std::swap(module_jktj_status_, other->module_jktj_status_);
  std::swap(module_wjfx_status_, other->module_wjfx_status_);
  std::swap(module_ycgj_status_, other->module_ycgj_status_);
  std::swap(module_xtjk_status_, other->module_xtjk_status_);
  std::swap(module_yhqxgl_status_, other->module_yhqxgl_status_);
  std::swap(module_sjyyglwh_status_, other->module_sjyyglwh_status_);
  std::swap(module_sjkyxztjk_status_, other->module_sjkyxztjk_status_);
  std::swap(module_sjbfhf_status_, other->module_sjbfhf_status_);
  std::swap(module_jrycl_status_, other->module_jrycl_status_);
  errordescription_.Swap(&other->errordescription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMonitor_ToXGS_SoftwareStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonitor_ToXGS_SoftwareStatus_descriptor_;
  metadata.reflection = PBMonitor_ToXGS_SoftwareStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMonitor_ToXGS_SoftwareStatus

// optional uint32 recordUTCTime = 1;
void PBMonitor_ToXGS_SoftwareStatus::clear_recordutctime() {
  recordutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor_ToXGS_SoftwareStatus::recordutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.recordUTCTime)
  return recordutctime_;
}
void PBMonitor_ToXGS_SoftwareStatus::set_recordutctime(::google::protobuf::uint32 value) {
  
  recordutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.recordUTCTime)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
void PBMonitor_ToXGS_SoftwareStatus::clear_subsys_xgs_hjff_status() {
  subsys_xgs_hjff_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::subsys_xgs_hjff_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Subsys_XGS_HJFF_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(subsys_xgs_hjff_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_subsys_xgs_hjff_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  subsys_xgs_hjff_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Subsys_XGS_HJFF_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
void PBMonitor_ToXGS_SoftwareStatus::clear_subsys_zhcl_status() {
  subsys_zhcl_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::subsys_zhcl_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Subsys_ZHCL_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(subsys_zhcl_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_subsys_zhcl_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  subsys_zhcl_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Subsys_ZHCL_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
void PBMonitor_ToXGS_SoftwareStatus::clear_subsys_xxfenxi_status() {
  subsys_xxfenxi_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::subsys_xxfenxi_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Subsys_XXFenXi_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(subsys_xxfenxi_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_subsys_xxfenxi_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  subsys_xxfenxi_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Subsys_XXFenXi_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
void PBMonitor_ToXGS_SoftwareStatus::clear_subsys_ywgl_status() {
  subsys_ywgl_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::subsys_ywgl_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Subsys_YWGL_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(subsys_ywgl_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_subsys_ywgl_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  subsys_ywgl_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Subsys_YWGL_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
void PBMonitor_ToXGS_SoftwareStatus::clear_subsys_sjgl_status() {
  subsys_sjgl_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::subsys_sjgl_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Subsys_SJGL_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(subsys_sjgl_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_subsys_sjgl_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  subsys_sjgl_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Subsys_SJGL_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_xxzhcl_status() {
  module_xxzhcl_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_xxzhcl_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_XXZHCL_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_xxzhcl_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_xxzhcl_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_xxzhcl_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_XXZHCL_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_xxgl_status() {
  module_xxgl_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_xxgl_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_XXGL_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_xxgl_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_xxgl_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_xxgl_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_XXGL_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_xxfenfa_status() {
  module_xxfenfa_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_xxfenfa_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_XXFenFa_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_xxfenfa_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_xxfenfa_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_xxfenfa_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_XXFenFa_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_jktj_status() {
  module_jktj_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_jktj_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_JKTJ_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_jktj_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_jktj_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_jktj_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_JKTJ_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_wjfx_status() {
  module_wjfx_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_wjfx_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_WJFX_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_wjfx_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_wjfx_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_wjfx_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_WJFX_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_ycgj_status() {
  module_ycgj_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_ycgj_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_YCGJ_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_ycgj_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_ycgj_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_ycgj_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_YCGJ_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_xtjk_status() {
  module_xtjk_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_xtjk_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_XTJK_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_xtjk_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_xtjk_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_xtjk_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_XTJK_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_yhqxgl_status() {
  module_yhqxgl_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_yhqxgl_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_YHQXGL_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_yhqxgl_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_yhqxgl_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_yhqxgl_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_YHQXGL_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_sjyyglwh_status() {
  module_sjyyglwh_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_sjyyglwh_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_SJYYGLWH_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_sjyyglwh_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_sjyyglwh_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_sjyyglwh_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_SJYYGLWH_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_sjkyxztjk_status() {
  module_sjkyxztjk_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_sjkyxztjk_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_SJKYXZTJK_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_sjkyxztjk_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_sjkyxztjk_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_sjkyxztjk_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_SJKYXZTJK_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_sjbfhf_status() {
  module_sjbfhf_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_sjbfhf_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_SJBFHF_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_sjbfhf_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_sjbfhf_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_sjbfhf_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_SJBFHF_Status)
}

// optional .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
void PBMonitor_ToXGS_SoftwareStatus::clear_module_jrycl_status() {
  module_jrycl_status_ = 0;
}
::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::module_jrycl_status() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.Module_JRYCL_Status)
  return static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(module_jrycl_status_);
}
void PBMonitor_ToXGS_SoftwareStatus::set_module_jrycl_status(::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus value) {
  
  module_jrycl_status_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.Module_JRYCL_Status)
}

// optional string errorDescription = 19;
void PBMonitor_ToXGS_SoftwareStatus::clear_errordescription() {
  errordescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PBMonitor_ToXGS_SoftwareStatus::errordescription() const {
  // @@protoc_insertion_point(field_get:PBMonitor_ToXGS_SoftwareStatus.errorDescription)
  return errordescription_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBMonitor_ToXGS_SoftwareStatus::set_errordescription(const ::std::string& value) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMonitor_ToXGS_SoftwareStatus.errorDescription)
}
void PBMonitor_ToXGS_SoftwareStatus::set_errordescription(const char* value) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMonitor_ToXGS_SoftwareStatus.errorDescription)
}
void PBMonitor_ToXGS_SoftwareStatus::set_errordescription(const char* value, size_t size) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMonitor_ToXGS_SoftwareStatus.errorDescription)
}
::std::string* PBMonitor_ToXGS_SoftwareStatus::mutable_errordescription() {
  
  // @@protoc_insertion_point(field_mutable:PBMonitor_ToXGS_SoftwareStatus.errorDescription)
  return errordescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PBMonitor_ToXGS_SoftwareStatus::release_errordescription() {
  // @@protoc_insertion_point(field_release:PBMonitor_ToXGS_SoftwareStatus.errorDescription)
  
  return errordescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBMonitor_ToXGS_SoftwareStatus::set_allocated_errordescription(::std::string* errordescription) {
  if (errordescription != NULL) {
    
  } else {
    
  }
  errordescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errordescription);
  // @@protoc_insertion_point(field_set_allocated:PBMonitor_ToXGS_SoftwareStatus.errorDescription)
}

inline const PBMonitor_ToXGS_SoftwareStatus* PBMonitor_ToXGS_SoftwareStatus::internal_default_instance() {
  return &PBMonitor_ToXGS_SoftwareStatus_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_TargetDistribution::kRecordUTCTimeFieldNumber;
const int PBMonitor_TargetDistribution::kDistributionIdFieldNumber;
const int PBMonitor_TargetDistribution::kDistributionStartUTCTimeFieldNumber;
const int PBMonitor_TargetDistribution::kEnumDistributionStateFieldNumber;
const int PBMonitor_TargetDistribution::kMessageCountSentFieldNumber;
const int PBMonitor_TargetDistribution::kTargetCountSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_TargetDistribution::PBMonitor_TargetDistribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Monitor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_TargetDistribution)
}

void PBMonitor_TargetDistribution::InitAsDefaultInstance() {
}

PBMonitor_TargetDistribution::PBMonitor_TargetDistribution(const PBMonitor_TargetDistribution& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMonitor_TargetDistribution)
}

void PBMonitor_TargetDistribution::SharedCtor() {
  ::memset(&recordutctime_, 0, reinterpret_cast<char*>(&target_count_sent_) -
    reinterpret_cast<char*>(&recordutctime_) + sizeof(target_count_sent_));
  _cached_size_ = 0;
}

PBMonitor_TargetDistribution::~PBMonitor_TargetDistribution() {
  // @@protoc_insertion_point(destructor:PBMonitor_TargetDistribution)
  SharedDtor();
}

void PBMonitor_TargetDistribution::SharedDtor() {
}

void PBMonitor_TargetDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonitor_TargetDistribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_TargetDistribution_descriptor_;
}

const PBMonitor_TargetDistribution& PBMonitor_TargetDistribution::default_instance() {
  protobuf_InitDefaults_Monitor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_TargetDistribution> PBMonitor_TargetDistribution_default_instance_;

PBMonitor_TargetDistribution* PBMonitor_TargetDistribution::New(::google::protobuf::Arena* arena) const {
  PBMonitor_TargetDistribution* n = new PBMonitor_TargetDistribution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMonitor_TargetDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_TargetDistribution)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PBMonitor_TargetDistribution, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMonitor_TargetDistribution*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recordutctime_, target_count_sent_);

#undef ZR_HELPER_
#undef ZR_

}

bool PBMonitor_TargetDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_TargetDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recordUTCTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_distribution_id;
        break;
      }

      // optional int32 distribution_id = 2;
      case 2: {
        if (tag == 16) {
         parse_distribution_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distribution_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_distributionStartUTCTime;
        break;
      }

      // optional uint32 distributionStartUTCTime = 3;
      case 3: {
        if (tag == 24) {
         parse_distributionStartUTCTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distributionstartutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enum_DistributionState;
        break;
      }

      // optional .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
      case 4: {
        if (tag == 32) {
         parse_enum_DistributionState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_distributionstate(static_cast< ::PB_Enum_TargetDistributionStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_message_Count_Sent;
        break;
      }

      // optional uint64 message_Count_Sent = 5;
      case 5: {
        if (tag == 40) {
         parse_message_Count_Sent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_count_sent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_target_Count_Sent;
        break;
      }

      // optional uint32 target_Count_Sent = 6;
      case 6: {
        if (tag == 48) {
         parse_target_Count_Sent:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_count_sent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_TargetDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_TargetDistribution)
  return false;
#undef DO_
}

void PBMonitor_TargetDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_TargetDistribution)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // optional int32 distribution_id = 2;
  if (this->distribution_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->distribution_id(), output);
  }

  // optional uint32 distributionStartUTCTime = 3;
  if (this->distributionstartutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->distributionstartutctime(), output);
  }

  // optional .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
  if (this->enum_distributionstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->enum_distributionstate(), output);
  }

  // optional uint64 message_Count_Sent = 5;
  if (this->message_count_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->message_count_sent(), output);
  }

  // optional uint32 target_Count_Sent = 6;
  if (this->target_count_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_count_sent(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMonitor_TargetDistribution)
}

::google::protobuf::uint8* PBMonitor_TargetDistribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_TargetDistribution)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // optional int32 distribution_id = 2;
  if (this->distribution_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->distribution_id(), target);
  }

  // optional uint32 distributionStartUTCTime = 3;
  if (this->distributionstartutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->distributionstartutctime(), target);
  }

  // optional .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
  if (this->enum_distributionstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->enum_distributionstate(), target);
  }

  // optional uint64 message_Count_Sent = 5;
  if (this->message_count_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->message_count_sent(), target);
  }

  // optional uint32 target_Count_Sent = 6;
  if (this->target_count_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_count_sent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_TargetDistribution)
  return target;
}

size_t PBMonitor_TargetDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_TargetDistribution)
  size_t total_size = 0;

  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // optional int32 distribution_id = 2;
  if (this->distribution_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->distribution_id());
  }

  // optional uint32 distributionStartUTCTime = 3;
  if (this->distributionstartutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->distributionstartutctime());
  }

  // optional .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
  if (this->enum_distributionstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_distributionstate());
  }

  // optional uint64 message_Count_Sent = 5;
  if (this->message_count_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->message_count_sent());
  }

  // optional uint32 target_Count_Sent = 6;
  if (this->target_count_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_count_sent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonitor_TargetDistribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_TargetDistribution)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMonitor_TargetDistribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_TargetDistribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_TargetDistribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_TargetDistribution)
    UnsafeMergeFrom(*source);
  }
}

void PBMonitor_TargetDistribution::MergeFrom(const PBMonitor_TargetDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_TargetDistribution)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBMonitor_TargetDistribution::UnsafeMergeFrom(const PBMonitor_TargetDistribution& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.distribution_id() != 0) {
    set_distribution_id(from.distribution_id());
  }
  if (from.distributionstartutctime() != 0) {
    set_distributionstartutctime(from.distributionstartutctime());
  }
  if (from.enum_distributionstate() != 0) {
    set_enum_distributionstate(from.enum_distributionstate());
  }
  if (from.message_count_sent() != 0) {
    set_message_count_sent(from.message_count_sent());
  }
  if (from.target_count_sent() != 0) {
    set_target_count_sent(from.target_count_sent());
  }
}

void PBMonitor_TargetDistribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_TargetDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_TargetDistribution::CopyFrom(const PBMonitor_TargetDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_TargetDistribution)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBMonitor_TargetDistribution::IsInitialized() const {

  return true;
}

void PBMonitor_TargetDistribution::Swap(PBMonitor_TargetDistribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_TargetDistribution::InternalSwap(PBMonitor_TargetDistribution* other) {
  std::swap(recordutctime_, other->recordutctime_);
  std::swap(distribution_id_, other->distribution_id_);
  std::swap(distributionstartutctime_, other->distributionstartutctime_);
  std::swap(enum_distributionstate_, other->enum_distributionstate_);
  std::swap(message_count_sent_, other->message_count_sent_);
  std::swap(target_count_sent_, other->target_count_sent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMonitor_TargetDistribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonitor_TargetDistribution_descriptor_;
  metadata.reflection = PBMonitor_TargetDistribution_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMonitor_TargetDistribution

// optional uint32 recordUTCTime = 1;
void PBMonitor_TargetDistribution::clear_recordutctime() {
  recordutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor_TargetDistribution::recordutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor_TargetDistribution.recordUTCTime)
  return recordutctime_;
}
void PBMonitor_TargetDistribution::set_recordutctime(::google::protobuf::uint32 value) {
  
  recordutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_TargetDistribution.recordUTCTime)
}

// optional int32 distribution_id = 2;
void PBMonitor_TargetDistribution::clear_distribution_id() {
  distribution_id_ = 0;
}
::google::protobuf::int32 PBMonitor_TargetDistribution::distribution_id() const {
  // @@protoc_insertion_point(field_get:PBMonitor_TargetDistribution.distribution_id)
  return distribution_id_;
}
void PBMonitor_TargetDistribution::set_distribution_id(::google::protobuf::int32 value) {
  
  distribution_id_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_TargetDistribution.distribution_id)
}

// optional uint32 distributionStartUTCTime = 3;
void PBMonitor_TargetDistribution::clear_distributionstartutctime() {
  distributionstartutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor_TargetDistribution::distributionstartutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor_TargetDistribution.distributionStartUTCTime)
  return distributionstartutctime_;
}
void PBMonitor_TargetDistribution::set_distributionstartutctime(::google::protobuf::uint32 value) {
  
  distributionstartutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_TargetDistribution.distributionStartUTCTime)
}

// optional .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
void PBMonitor_TargetDistribution::clear_enum_distributionstate() {
  enum_distributionstate_ = 0;
}
::PB_Enum_TargetDistributionStatus PBMonitor_TargetDistribution::enum_distributionstate() const {
  // @@protoc_insertion_point(field_get:PBMonitor_TargetDistribution.enum_DistributionState)
  return static_cast< ::PB_Enum_TargetDistributionStatus >(enum_distributionstate_);
}
void PBMonitor_TargetDistribution::set_enum_distributionstate(::PB_Enum_TargetDistributionStatus value) {
  
  enum_distributionstate_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_TargetDistribution.enum_DistributionState)
}

// optional uint64 message_Count_Sent = 5;
void PBMonitor_TargetDistribution::clear_message_count_sent() {
  message_count_sent_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBMonitor_TargetDistribution::message_count_sent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_TargetDistribution.message_Count_Sent)
  return message_count_sent_;
}
void PBMonitor_TargetDistribution::set_message_count_sent(::google::protobuf::uint64 value) {
  
  message_count_sent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_TargetDistribution.message_Count_Sent)
}

// optional uint32 target_Count_Sent = 6;
void PBMonitor_TargetDistribution::clear_target_count_sent() {
  target_count_sent_ = 0u;
}
::google::protobuf::uint32 PBMonitor_TargetDistribution::target_count_sent() const {
  // @@protoc_insertion_point(field_get:PBMonitor_TargetDistribution.target_Count_Sent)
  return target_count_sent_;
}
void PBMonitor_TargetDistribution::set_target_count_sent(::google::protobuf::uint32 value) {
  
  target_count_sent_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_TargetDistribution.target_Count_Sent)
}

inline const PBMonitor_TargetDistribution* PBMonitor_TargetDistribution::internal_default_instance() {
  return &PBMonitor_TargetDistribution_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_AliveTargetCount::kRecordUTCTimeFieldNumber;
const int PBMonitor_AliveTargetCount::kEnumTargetIDTypeFieldNumber;
const int PBMonitor_AliveTargetCount::kAliveTargetcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_AliveTargetCount::PBMonitor_AliveTargetCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Monitor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_AliveTargetCount)
}

void PBMonitor_AliveTargetCount::InitAsDefaultInstance() {
}

PBMonitor_AliveTargetCount::PBMonitor_AliveTargetCount(const PBMonitor_AliveTargetCount& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMonitor_AliveTargetCount)
}

void PBMonitor_AliveTargetCount::SharedCtor() {
  ::memset(&recordutctime_, 0, reinterpret_cast<char*>(&alivetargetcount_) -
    reinterpret_cast<char*>(&recordutctime_) + sizeof(alivetargetcount_));
  _cached_size_ = 0;
}

PBMonitor_AliveTargetCount::~PBMonitor_AliveTargetCount() {
  // @@protoc_insertion_point(destructor:PBMonitor_AliveTargetCount)
  SharedDtor();
}

void PBMonitor_AliveTargetCount::SharedDtor() {
}

void PBMonitor_AliveTargetCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonitor_AliveTargetCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_AliveTargetCount_descriptor_;
}

const PBMonitor_AliveTargetCount& PBMonitor_AliveTargetCount::default_instance() {
  protobuf_InitDefaults_Monitor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_AliveTargetCount> PBMonitor_AliveTargetCount_default_instance_;

PBMonitor_AliveTargetCount* PBMonitor_AliveTargetCount::New(::google::protobuf::Arena* arena) const {
  PBMonitor_AliveTargetCount* n = new PBMonitor_AliveTargetCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMonitor_AliveTargetCount::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_AliveTargetCount)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PBMonitor_AliveTargetCount, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMonitor_AliveTargetCount*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recordutctime_, alivetargetcount_);

#undef ZR_HELPER_
#undef ZR_

}

bool PBMonitor_AliveTargetCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_AliveTargetCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recordUTCTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enum_targetID_Type;
        break;
      }

      // optional .PB_Enum_TargetID_Type enum_targetID_Type = 2;
      case 2: {
        if (tag == 16) {
         parse_enum_targetID_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_targetid_type(static_cast< ::PB_Enum_TargetID_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aliveTargetcount;
        break;
      }

      // optional int32 aliveTargetcount = 3;
      case 3: {
        if (tag == 24) {
         parse_aliveTargetcount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alivetargetcount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_AliveTargetCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_AliveTargetCount)
  return false;
#undef DO_
}

void PBMonitor_AliveTargetCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_AliveTargetCount)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // optional .PB_Enum_TargetID_Type enum_targetID_Type = 2;
  if (this->enum_targetid_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->enum_targetid_type(), output);
  }

  // optional int32 aliveTargetcount = 3;
  if (this->alivetargetcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alivetargetcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMonitor_AliveTargetCount)
}

::google::protobuf::uint8* PBMonitor_AliveTargetCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_AliveTargetCount)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // optional .PB_Enum_TargetID_Type enum_targetID_Type = 2;
  if (this->enum_targetid_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->enum_targetid_type(), target);
  }

  // optional int32 aliveTargetcount = 3;
  if (this->alivetargetcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alivetargetcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_AliveTargetCount)
  return target;
}

size_t PBMonitor_AliveTargetCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_AliveTargetCount)
  size_t total_size = 0;

  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // optional .PB_Enum_TargetID_Type enum_targetID_Type = 2;
  if (this->enum_targetid_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_targetid_type());
  }

  // optional int32 aliveTargetcount = 3;
  if (this->alivetargetcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alivetargetcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonitor_AliveTargetCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_AliveTargetCount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMonitor_AliveTargetCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_AliveTargetCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_AliveTargetCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_AliveTargetCount)
    UnsafeMergeFrom(*source);
  }
}

void PBMonitor_AliveTargetCount::MergeFrom(const PBMonitor_AliveTargetCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_AliveTargetCount)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBMonitor_AliveTargetCount::UnsafeMergeFrom(const PBMonitor_AliveTargetCount& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.enum_targetid_type() != 0) {
    set_enum_targetid_type(from.enum_targetid_type());
  }
  if (from.alivetargetcount() != 0) {
    set_alivetargetcount(from.alivetargetcount());
  }
}

void PBMonitor_AliveTargetCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_AliveTargetCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_AliveTargetCount::CopyFrom(const PBMonitor_AliveTargetCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_AliveTargetCount)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBMonitor_AliveTargetCount::IsInitialized() const {

  return true;
}

void PBMonitor_AliveTargetCount::Swap(PBMonitor_AliveTargetCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_AliveTargetCount::InternalSwap(PBMonitor_AliveTargetCount* other) {
  std::swap(recordutctime_, other->recordutctime_);
  std::swap(enum_targetid_type_, other->enum_targetid_type_);
  std::swap(alivetargetcount_, other->alivetargetcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMonitor_AliveTargetCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonitor_AliveTargetCount_descriptor_;
  metadata.reflection = PBMonitor_AliveTargetCount_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMonitor_AliveTargetCount

// optional uint32 recordUTCTime = 1;
void PBMonitor_AliveTargetCount::clear_recordutctime() {
  recordutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor_AliveTargetCount::recordutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor_AliveTargetCount.recordUTCTime)
  return recordutctime_;
}
void PBMonitor_AliveTargetCount::set_recordutctime(::google::protobuf::uint32 value) {
  
  recordutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_AliveTargetCount.recordUTCTime)
}

// optional .PB_Enum_TargetID_Type enum_targetID_Type = 2;
void PBMonitor_AliveTargetCount::clear_enum_targetid_type() {
  enum_targetid_type_ = 0;
}
::PB_Enum_TargetID_Type PBMonitor_AliveTargetCount::enum_targetid_type() const {
  // @@protoc_insertion_point(field_get:PBMonitor_AliveTargetCount.enum_targetID_Type)
  return static_cast< ::PB_Enum_TargetID_Type >(enum_targetid_type_);
}
void PBMonitor_AliveTargetCount::set_enum_targetid_type(::PB_Enum_TargetID_Type value) {
  
  enum_targetid_type_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_AliveTargetCount.enum_targetID_Type)
}

// optional int32 aliveTargetcount = 3;
void PBMonitor_AliveTargetCount::clear_alivetargetcount() {
  alivetargetcount_ = 0;
}
::google::protobuf::int32 PBMonitor_AliveTargetCount::alivetargetcount() const {
  // @@protoc_insertion_point(field_get:PBMonitor_AliveTargetCount.aliveTargetcount)
  return alivetargetcount_;
}
void PBMonitor_AliveTargetCount::set_alivetargetcount(::google::protobuf::int32 value) {
  
  alivetargetcount_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_AliveTargetCount.aliveTargetcount)
}

inline const PBMonitor_AliveTargetCount* PBMonitor_AliveTargetCount::internal_default_instance() {
  return &PBMonitor_AliveTargetCount_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus_descriptor_;
}
bool PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::EV_MessagesRcvdStatus_NA;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::EV_MessagesRcvdStatus_Normal;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::EV_MessagesRcvdStatus_Error;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PB_Enum_MessagesRcvdStatus_MIN;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PB_Enum_MessagesRcvdStatus_MAX;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PB_Enum_MessagesRcvdStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kRecordUTCTimeFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kEnumTargetInfoSourceFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kEnumTargetInfoTypeFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kMessagesRcvdFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kTargetsRcvdFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kMessagesRcvdStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_Monitor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::InitAsDefaultInstance() {
}

PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType(const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SharedCtor() {
  ::memset(&recordutctime_, 0, reinterpret_cast<char*>(&messagesrcvdstatus_) -
    reinterpret_cast<char*>(&recordutctime_) + sizeof(messagesrcvdstatus_));
  _cached_size_ = 0;
}

PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::~PBMonitor_MessagesRcvdPerTargetInfoSourceAndType() {
  // @@protoc_insertion_point(destructor:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  SharedDtor();
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SharedDtor() {
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_descriptor_;
}

const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::default_instance() {
  protobuf_InitDefaults_Monitor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_MessagesRcvdPerTargetInfoSourceAndType> PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_;

PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::New(::google::protobuf::Arena* arena) const {
  PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* n = new PBMonitor_MessagesRcvdPerTargetInfoSourceAndType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PBMonitor_MessagesRcvdPerTargetInfoSourceAndType*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(recordutctime_, messagesrcvdstatus_);

#undef ZR_HELPER_
#undef ZR_

}

bool PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recordUTCTime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enum_targetInfo_Source;
        break;
      }

      // optional .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
      case 2: {
        if (tag == 16) {
         parse_enum_targetInfo_Source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_targetinfo_source(static_cast< ::PB_Enum_TargetInfo_Source >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enum_targetInfo_Type;
        break;
      }

      // optional .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
      case 3: {
        if (tag == 24) {
         parse_enum_targetInfo_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_targetinfo_type(static_cast< ::PB_Enum_TargetInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_messagesRcvd;
        break;
      }

      // optional int64 messagesRcvd = 4;
      case 4: {
        if (tag == 32) {
         parse_messagesRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targetsRcvd;
        break;
      }

      // optional int32 targetsRcvd = 5;
      case 5: {
        if (tag == 40) {
         parse_targetsRcvd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsrcvd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_messagesRcvdStatus;
        break;
      }

      // optional .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_messagesRcvdStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_messagesrcvdstatus(static_cast< ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  return false;
#undef DO_
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // optional .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
  if (this->enum_targetinfo_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->enum_targetinfo_source(), output);
  }

  // optional .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
  if (this->enum_targetinfo_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enum_targetinfo_type(), output);
  }

  // optional int64 messagesRcvd = 4;
  if (this->messagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->messagesrcvd(), output);
  }

  // optional int32 targetsRcvd = 5;
  if (this->targetsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetsrcvd(), output);
  }

  // optional .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
  if (this->messagesrcvdstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->messagesrcvdstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
}

::google::protobuf::uint8* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // optional .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
  if (this->enum_targetinfo_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->enum_targetinfo_source(), target);
  }

  // optional .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
  if (this->enum_targetinfo_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->enum_targetinfo_type(), target);
  }

  // optional int64 messagesRcvd = 4;
  if (this->messagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->messagesrcvd(), target);
  }

  // optional int32 targetsRcvd = 5;
  if (this->targetsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetsrcvd(), target);
  }

  // optional .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
  if (this->messagesrcvdstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->messagesrcvdstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  return target;
}

size_t PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  size_t total_size = 0;

  // optional uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // optional .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
  if (this->enum_targetinfo_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_targetinfo_source());
  }

  // optional .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
  if (this->enum_targetinfo_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_targetinfo_type());
  }

  // optional int64 messagesRcvd = 4;
  if (this->messagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->messagesrcvd());
  }

  // optional int32 targetsRcvd = 5;
  if (this->targetsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsrcvd());
  }

  // optional .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
  if (this->messagesrcvdstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagesrcvdstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
    UnsafeMergeFrom(*source);
  }
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::MergeFrom(const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::UnsafeMergeFrom(const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.enum_targetinfo_source() != 0) {
    set_enum_targetinfo_source(from.enum_targetinfo_source());
  }
  if (from.enum_targetinfo_type() != 0) {
    set_enum_targetinfo_type(from.enum_targetinfo_type());
  }
  if (from.messagesrcvd() != 0) {
    set_messagesrcvd(from.messagesrcvd());
  }
  if (from.targetsrcvd() != 0) {
    set_targetsrcvd(from.targetsrcvd());
  }
  if (from.messagesrcvdstatus() != 0) {
    set_messagesrcvdstatus(from.messagesrcvdstatus());
  }
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::CopyFrom(const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::IsInitialized() const {

  return true;
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::Swap(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::InternalSwap(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* other) {
  std::swap(recordutctime_, other->recordutctime_);
  std::swap(enum_targetinfo_source_, other->enum_targetinfo_source_);
  std::swap(enum_targetinfo_type_, other->enum_targetinfo_type_);
  std::swap(messagesrcvd_, other->messagesrcvd_);
  std::swap(targetsrcvd_, other->targetsrcvd_);
  std::swap(messagesrcvdstatus_, other->messagesrcvdstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_descriptor_;
  metadata.reflection = PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMonitor_MessagesRcvdPerTargetInfoSourceAndType

// optional uint32 recordUTCTime = 1;
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::clear_recordutctime() {
  recordutctime_ = 0u;
}
::google::protobuf::uint32 PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::recordutctime() const {
  // @@protoc_insertion_point(field_get:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.recordUTCTime)
  return recordutctime_;
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::set_recordutctime(::google::protobuf::uint32 value) {
  
  recordutctime_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.recordUTCTime)
}

// optional .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::clear_enum_targetinfo_source() {
  enum_targetinfo_source_ = 0;
}
::PB_Enum_TargetInfo_Source PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::enum_targetinfo_source() const {
  // @@protoc_insertion_point(field_get:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.enum_targetInfo_Source)
  return static_cast< ::PB_Enum_TargetInfo_Source >(enum_targetinfo_source_);
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::set_enum_targetinfo_source(::PB_Enum_TargetInfo_Source value) {
  
  enum_targetinfo_source_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.enum_targetInfo_Source)
}

// optional .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::clear_enum_targetinfo_type() {
  enum_targetinfo_type_ = 0;
}
::PB_Enum_TargetInfo_Type PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::enum_targetinfo_type() const {
  // @@protoc_insertion_point(field_get:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.enum_targetInfo_Type)
  return static_cast< ::PB_Enum_TargetInfo_Type >(enum_targetinfo_type_);
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::set_enum_targetinfo_type(::PB_Enum_TargetInfo_Type value) {
  
  enum_targetinfo_type_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.enum_targetInfo_Type)
}

// optional int64 messagesRcvd = 4;
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::clear_messagesrcvd() {
  messagesrcvd_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::messagesrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.messagesRcvd)
  return messagesrcvd_;
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::set_messagesrcvd(::google::protobuf::int64 value) {
  
  messagesrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.messagesRcvd)
}

// optional int32 targetsRcvd = 5;
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::clear_targetsrcvd() {
  targetsrcvd_ = 0;
}
::google::protobuf::int32 PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::targetsrcvd() const {
  // @@protoc_insertion_point(field_get:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.targetsRcvd)
  return targetsrcvd_;
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::set_targetsrcvd(::google::protobuf::int32 value) {
  
  targetsrcvd_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.targetsRcvd)
}

// optional .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::clear_messagesrcvdstatus() {
  messagesrcvdstatus_ = 0;
}
::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::messagesrcvdstatus() const {
  // @@protoc_insertion_point(field_get:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.messagesRcvdStatus)
  return static_cast< ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus >(messagesrcvdstatus_);
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::set_messagesrcvdstatus(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus value) {
  
  messagesrcvdstatus_ = value;
  // @@protoc_insertion_point(field_set:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.messagesRcvdStatus)
}

inline const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::internal_default_instance() {
  return &PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
