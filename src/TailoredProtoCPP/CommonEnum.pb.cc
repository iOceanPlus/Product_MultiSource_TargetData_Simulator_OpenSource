// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonEnum.proto

#include "CommonEnum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_CommonEnum_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "CommonEnum.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020CommonEnum.proto*\274\006\n PB_Enum_Aggregate"
      "d_AIS_Ship_Type\022\037\n\033EV_AggregatedAISShipT"
      "ype_NA\020\000\022&\n\"EV_AggregatedAISShipType_Car"
      "goShip\020\001\022$\n EV_AggregatedAISShipType_SAR"
      "Ship\020\002\022#\n\037EV_AggregatedAISShipType_Tanke"
      "r\020\003\022 \n\034EV_AggregatedAISShipType_Tug\020\004\022(\n"
      "$EV_AggregatedAISShipType_FishingShip\020\005\022"
      "\'\n#EV_AggregatedAISShipType_TowingShip\020\006"
      "\022*\n&EV_AggregatedAISShipType_PassengerSh"
      "ip\020\007\022)\n%EV_AggregatedAISShipType_Militar"
      "yShip\020\010\022/\n+EV_AggregatedAISShipType_LawE"
      "nforcementShip\020\t\022$\n EV_AggregatedAISShip"
      "Type_WIGShip\020\n\022$\n EV_AggregatedAISShipTy"
      "pe_HSCShip\020\013\022\"\n\036EV_AggregatedAISShipType"
      "_Pilot\020\014\022\'\n#EV_AggregatedAISShipType_Por"
      "tTender\020\r\022$\n EV_AggregatedAISShipType_Sa"
      "iling\020\016\022*\n&EV_AggregatedAISShipType_Plea"
      "sureCraft\020\017\0220\n,EV_AggregatedAISShipType_"
      "UnderwaterOperation\020\020\022#\n\037EV_AggregatedAI"
      "SShipType_Diving\020\021\022#\n\037EV_AggregatedAISSh"
      "ipType_Others\020d\022 \n\034EV_AggregatedAISShipT"
      "ype_Any\020e*\331\003\n\027PB_Enum_ShipAnomalyType\022\035\n"
      "\031EV_ShipAnomalyType_NORMAL\020\000\022\'\n#EV_ShipA"
      "nomalyType_SUSPICIOUS_TRACK\020\001\022!\n\035EV_Ship"
      "AnomalyType_HIGH_SPEED\020\002\022&\n\"EV_ShipAnoma"
      "lyType_HIGH_ROT_Sensor\020\003\022(\n$EV_ShipAnoma"
      "lyType_NOT_UNDER_COMMAND\020\004\022\036\n\032EV_ShipAno"
      "malyType_AGROUND\020\005\0221\n-EV_ShipAnomalyType"
      "_RESTRICTED_Manoeuvrability\020\006\022#\n\037EV_Ship"
      "AnomalyType_MilitaryShip\020\007\022)\n%EV_ShipAno"
      "malyType_LawEnforcementShip\020\010\022!\n\035EV_Ship"
      "AnomalyType_AISOffLine\020\t\022 \n\034EV_ShipAnoma"
      "lyType_ZoneEntry\020\n\022\031\n\025EV_ShipAnomalyType"
      "_NA\020c*\364\002\n\027PB_Enum_TargetInfo_Type\022\030\n\024EV_"
      "TargetInfoType_NA\020\000\022/\n+EV_TargetInfoType"
      "_ArgosAndMaritimeSatellite\020\001\022\034\n\030EV_Targe"
      "tInfoType_Beidou\020\002\022\037\n\033EV_TargetInfoType_"
      "AISStatic\020\003\022 \n\034EV_TargetInfoType_AISDyna"
      "mic\020\004\022\032\n\026EV_TargetInfoType_LRIT\020\005\022\035\n\031EV_"
      "TargetInfoType_Haijian\020\007\022\034\n\030EV_TargetInf"
      "oType_Fusion\020\017\022\031\n\025EV_TargetInfoType_Any\020"
      "\020\022\034\n\030EV_TargetInfoType_Others\020\021\022\033\n\027EV_Ta"
      "rgetInfoType_Truth\020\037*\255\003\n\031PB_Enum_TargetI"
      "nfo_Source\022\032\n\026EV_TargetInfoSource_NA\020\000\022+"
      "\n\'EV_TargetInfoSource_AgricultureMinistr"
      "y\020\001\022&\n\"EV_TargetInfoSource_MaritimeBurea"
      "u\020\002\022\037\n\033EV_TargetInfoSource_Haijian\020\003\022\036\n\032"
      "EV_TargetInfoSource_SatAIS\020\004\022\'\n#EV_Targe"
      "tInfoSource_SearchAndRescue\020\005\0222\n.EV_Targ"
      "etInfoSource_CivilMarineSituationSystem\020"
      "\006\022$\n EV_TargetInfoSource_ShipSecurity\020\007\022"
      "\036\n\032EV_TargetInfoSource_Fusion\020\017\022\033\n\027EV_Ta"
      "rgetInfoSource_Any\020\020\022\036\n\032EV_TargetInfoSou"
      "rce_Others\020\021*\264\002\n\025PB_Enum_TargetID_Type\022\026"
      "\n\022EV_TargetIDType_NA\020\000\022\030\n\024EV_TargetIDTyp"
      "e_MMSI\020\001\022\027\n\023EV_TargetIDType_IMO\020\002\022\034\n\030EV_"
      "TargetIDType_BeidouID\020\003\022\035\n\031EV_TargetIDTy"
      "pe_HaijianID\020\004\022\'\n#EV_TargetIDType_ArgosA"
      "ndMarineSatID\020\005\022\032\n\026EV_TargetIDType_Fusio"
      "n\020\017\022\032\n\026EV_TargetIDType_Others\020\020\022\027\n\023EV_Ta"
      "rgetIDType_Any\020\021\022\031\n\025EV_TargetIDType_Trut"
      "h\020\037*\200\002\n\037PB_Enum_TargetInfo_ProcessLevel\022"
      " \n\034EV_TargetInfoProcessLevel_NA\020\000\022!\n\035EV_"
      "TargetInfoProcessLevel_Raw\020\001\022*\n&EV_Targe"
      "tInfoProcessLevel_Preprocessed\020\002\022#\n\037EV_T"
      "argetInfoProcessLevel_Fused\020\003\022!\n\035EV_Targ"
      "etInfoProcessLevel_Any\020\017\022$\n EV_TargetInf"
      "oProcessLevel_Others\020\020*\254\003\n\020PB_Enum_Softw"
      "are\022\022\n\016EV_Software_NA\020\000\022 \n\034EV_Software_O"
      "nLinePreprocess\020\001\022\"\n\036EV_Software_TargetD"
      "istribution\020\002\022\034\n\030EV_Software_OnLineFusio"
      "n\020\003\022!\n\035EV_Software_StorageManagement\020\004\022\037"
      "\n\033EV_Software_SoftwareMonitor\020\005\022\026\n\022EV_So"
      "ftware_XGSWeb\020\006\022\034\n\030EV_Software_XGSDestop"
      "_2D\020\007\022\035\n\031EV_Software_XGSDesktop_3D\020\010\022\031\n\025"
      "EV_Software_DataAssoc\020\t\022\032\n\026EV_Software_M"
      "aritimeSA\020\n\022#\n\037EV_Software_TargetDataSim"
      "ulator\020\013\022\026\n\022EV_Software_Others\020\017\022\023\n\017EV_S"
      "oftware_Any\020\020*\242\003\n\032PB_Enum_Target_ThreatL"
      "evel\022\033\n\027EV_TargetThreatLevel_NA\020\000\022\037\n\033EV_"
      "TargetThreatLevel_Level1\020\001\022\037\n\033EV_TargetT"
      "hreatLevel_Level2\020\002\022\037\n\033EV_TargetThreatLe"
      "vel_Level3\020\003\022\037\n\033EV_TargetThreatLevel_Lev"
      "el4\020\004\022\037\n\033EV_TargetThreatLevel_Level5\020\005\022\037"
      "\n\033EV_TargetThreatLevel_Level6\020\006\022\037\n\033EV_Ta"
      "rgetThreatLevel_Level7\020\007\022\037\n\033EV_TargetThr"
      "eatLevel_Level8\020\010\022\037\n\033EV_TargetThreatLeve"
      "l_Level9\020\t\022 \n\034EV_TargetThreatLevel_Level"
      "10\020\n\022\034\n\030EV_TargetThreatLevel_Non\020\017*\266\002\n\'P"
      "B_Enum_Target_XGSCustomizedThreatLevel\022("
      "\n$EV_XGSCustomizedTargetThreatLevel_NA\020\000"
      "\022,\n(EV_XGSCustomizedTargetThreatLevel_Le"
      "vel1\020\001\022,\n(EV_XGSCustomizedTargetThreatLe"
      "vel_Level2\020\002\022,\n(EV_XGSCustomizedTargetTh"
      "reatLevel_Level3\020\003\022,\n(EV_XGSCustomizedTa"
      "rgetThreatLevel_Level4\020\004\022)\n%EV_XGSCustom"
      "izedTargetThreatLevel_Non\020\017*\375\001\n\024PB_Enum_"
      "Region_Shape\022\024\n\020EV_RegionType_NA\020\000\022\030\n\024EV"
      "_RegionType_Circle\020\001\022\033\n\027EV_RegionType_Re"
      "ctangle\020\002\022\031\n\025EV_RegionType_Polygon\020\003\022\032\n\026"
      "EV_RegionType_GeoPoint\020\004\022#\n\037EV_RegionTyp"
      "e_GeoCircularSector\020\005\022\"\n\036EV_RegionType_G"
      "eoAnnularSector\020\006\022\030\n\024EV_RegionType_Other"
      "s\020\017B\024\n\022team.iOceanPlus.PBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonEnum.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_CommonEnum_2eproto
const ::google::protobuf::EnumDescriptor* PB_Enum_Aggregated_AIS_Ship_Type_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[0];
}
bool PB_Enum_Aggregated_AIS_Ship_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_ShipAnomalyType_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[1];
}
bool PB_Enum_ShipAnomalyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_TargetInfo_Type_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[2];
}
bool PB_Enum_TargetInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 15:
    case 16:
    case 17:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_TargetInfo_Source_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[3];
}
bool PB_Enum_TargetInfo_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_TargetID_Type_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[4];
}
bool PB_Enum_TargetID_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 15:
    case 16:
    case 17:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_TargetInfo_ProcessLevel_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[5];
}
bool PB_Enum_TargetInfo_ProcessLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_Software_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[6];
}
bool PB_Enum_Software_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_Target_ThreatLevel_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[7];
}
bool PB_Enum_Target_ThreatLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_Target_XGSCustomizedThreatLevel_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[8];
}
bool PB_Enum_Target_XGSCustomizedThreatLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PB_Enum_Region_Shape_descriptor() {
  protobuf_CommonEnum_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonEnum_2eproto::file_level_enum_descriptors[9];
}
bool PB_Enum_Region_Shape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 15:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
