// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#include "Monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Monitor_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Monitor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_AliveTargetCount;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Monitor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Monitor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_Probe;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Monitor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_ProbeAck;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Monitor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_TargetDistribution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Monitor_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_ToXGS_SoftwareStatus;
}  // namespace protobuf_Monitor_2eproto
class PBMonitorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMonitor>
      _instance;
} _PBMonitor_default_instance_;
class PBMonitor_ProbeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_Probe>
      _instance;
} _PBMonitor_Probe_default_instance_;
class PBMonitor_ProbeAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_ProbeAck>
      _instance;
} _PBMonitor_ProbeAck_default_instance_;
class PBMonitor_ToXGS_SoftwareStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_ToXGS_SoftwareStatus>
      _instance;
} _PBMonitor_ToXGS_SoftwareStatus_default_instance_;
class PBMonitor_TargetDistributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_TargetDistribution>
      _instance;
} _PBMonitor_TargetDistribution_default_instance_;
class PBMonitor_AliveTargetCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_AliveTargetCount>
      _instance;
} _PBMonitor_AliveTargetCount_default_instance_;
class PBMonitor_MessagesRcvdPerTargetInfoSourceAndTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBMonitor_MessagesRcvdPerTargetInfoSourceAndType>
      _instance;
} _PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_;
namespace protobuf_Monitor_2eproto {
static void InitDefaultsPBMonitor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBMonitor_default_instance_;
    new (ptr) ::PBMonitor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBMonitor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_PBMonitor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsPBMonitor}, {
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_Probe.base,
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_ProbeAck.base,
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_TargetDistribution.base,
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_AliveTargetCount.base,
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.base,
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_ToXGS_SoftwareStatus.base,}};

static void InitDefaultsPBMonitor_Probe() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBMonitor_Probe_default_instance_;
    new (ptr) ::PBMonitor_Probe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBMonitor_Probe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_Probe =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPBMonitor_Probe}, {}};

static void InitDefaultsPBMonitor_ProbeAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBMonitor_ProbeAck_default_instance_;
    new (ptr) ::PBMonitor_ProbeAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBMonitor_ProbeAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_ProbeAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPBMonitor_ProbeAck}, {}};

static void InitDefaultsPBMonitor_ToXGS_SoftwareStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBMonitor_ToXGS_SoftwareStatus_default_instance_;
    new (ptr) ::PBMonitor_ToXGS_SoftwareStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBMonitor_ToXGS_SoftwareStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_ToXGS_SoftwareStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPBMonitor_ToXGS_SoftwareStatus}, {}};

static void InitDefaultsPBMonitor_TargetDistribution() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBMonitor_TargetDistribution_default_instance_;
    new (ptr) ::PBMonitor_TargetDistribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBMonitor_TargetDistribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_TargetDistribution =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPBMonitor_TargetDistribution}, {}};

static void InitDefaultsPBMonitor_AliveTargetCount() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBMonitor_AliveTargetCount_default_instance_;
    new (ptr) ::PBMonitor_AliveTargetCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBMonitor_AliveTargetCount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_AliveTargetCount =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPBMonitor_AliveTargetCount}, {}};

static void InitDefaultsPBMonitor_MessagesRcvdPerTargetInfoSourceAndType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_;
    new (ptr) ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPBMonitor_MessagesRcvdPerTargetInfoSourceAndType}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PBMonitor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PBMonitor_Probe.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PBMonitor_ProbeAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PBMonitor_ToXGS_SoftwareStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PBMonitor_TargetDistribution.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PBMonitor_AliveTargetCount.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, recordutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, sequencenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, enum_sender_software_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, softwarestartedutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, monitorprobe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, monitorprobeack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, listmonitor_targetdistribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, listmonitor_alivetargetcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, listmessagesrcvdpertargetinfosourceandtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor, listtoxgssoftwarestatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_Probe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_Probe, recordutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_Probe, monitorprobesequencenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_Probe, strmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, recordutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, enum_probesender_software_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, monitorprobesequencenumacked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, totalmessagesrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, origtargetpositionsrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, validorigtargetpositionsrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, preprocessedtargetpositionsrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, fusedtargetpositionsrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, anomalymessagesrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, configmessagesrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, requestmessagesrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, commandmessagesrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, totalmessagessent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, validorigtargetpositionssent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, preprocessedtargetpositionssent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, fusedtargetpositionssent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, anomalymessagessent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, configmessagessent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, requestmessagessent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ProbeAck, commandmessagessent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, recordutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, subsys_xgs_hjff_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, subsys_zhcl_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, subsys_xxfenxi_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, subsys_ywgl_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, subsys_sjgl_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_xxzhcl_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_xxgl_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_xxfenfa_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_jktj_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_wjfx_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_ycgj_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_xtjk_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_yhqxgl_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_sjyyglwh_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_sjkyxztjk_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_sjbfhf_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, module_jrycl_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_ToXGS_SoftwareStatus, errordescription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_TargetDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_TargetDistribution, recordutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_TargetDistribution, distribution_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_TargetDistribution, distributionstartutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_TargetDistribution, enum_distributionstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_TargetDistribution, message_count_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_TargetDistribution, target_count_sent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_AliveTargetCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_AliveTargetCount, recordutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_AliveTargetCount, enum_targetid_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_AliveTargetCount, alivetargetcount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, recordutctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, enum_targetinfo_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, enum_targetinfo_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, messagesrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, targetsrcvd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType, messagesrcvdstatus_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PBMonitor)},
  { 15, -1, sizeof(::PBMonitor_Probe)},
  { 23, -1, sizeof(::PBMonitor_ProbeAck)},
  { 48, -1, sizeof(::PBMonitor_ToXGS_SoftwareStatus)},
  { 72, -1, sizeof(::PBMonitor_TargetDistribution)},
  { 83, -1, sizeof(::PBMonitor_AliveTargetCount)},
  { 91, -1, sizeof(::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PBMonitor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PBMonitor_Probe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PBMonitor_ProbeAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PBMonitor_ToXGS_SoftwareStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PBMonitor_TargetDistribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PBMonitor_AliveTargetCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Monitor.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rMonitor.proto\032\020CommonEnum.proto\"\221\004\n\tPB"
      "Monitor\022\025\n\rrecordUTCTime\030\001 \001(\r\022\023\n\013sequen"
      "ceNum\030\002 \001(\r\022/\n\024enum_Sender_Software\030\003 \001("
      "\0162\021.PB_Enum_Software\022\036\n\026softwareStartedU"
      "TCTime\030\004 \001(\r\022&\n\014monitorProbe\030\005 \001(\0132\020.PBM"
      "onitor_Probe\022,\n\017monitorProbeAck\030\006 \001(\0132\023."
      "PBMonitor_ProbeAck\022E\n\036listMonitor_Target"
      "Distribution\030\007 \003(\0132\035.PBMonitor_TargetDis"
      "tribution\022A\n\034listMonitor_AliveTargetCoun"
      "t\030\010 \003(\0132\033.PBMonitor_AliveTargetCount\022e\n*"
      "listMessagesRcvdPerTargetInfoSourceAndTy"
      "pe\030\t \003(\01321.PBMonitor_MessagesRcvdPerTarg"
      "etInfoSourceAndType\022@\n\027listToXGSSoftware"
      "Status\030\n \003(\0132\037.PBMonitor_ToXGS_SoftwareS"
      "tatus\"Y\n\017PBMonitor_Probe\022\025\n\rrecordUTCTim"
      "e\030\001 \001(\r\022\037\n\027monitorProbeSequenceNum\030\002 \001(\r"
      "\022\016\n\006strMsg\030\003 \001(\t\"\246\005\n\022PBMonitor_ProbeAck\022"
      "\025\n\rrecordUTCTime\030\001 \001(\r\0224\n\031enum_ProbeSend"
      "er_Software\030\002 \001(\0162\021.PB_Enum_Software\022$\n\034"
      "monitorProbeSequenceNumAcked\030\003 \001(\r\022\031\n\021to"
      "talMessagesRcvd\030\004 \001(\004\022\037\n\027origTargetPosit"
      "ionsRcvd\030\005 \001(\004\022$\n\034validOrigTargetPositio"
      "nsRcvd\030\006 \001(\004\022\'\n\037preprocessedTargetPositi"
      "onsRcvd\030\007 \001(\004\022 \n\030fusedTargetPositionsRcv"
      "d\030\010 \001(\004\022\033\n\023anomalyMessagesRcvd\030\t \001(\004\022\032\n\022"
      "configMessagesRcvd\030\n \001(\r\022\033\n\023requestMessa"
      "gesRcvd\030\013 \001(\r\022\033\n\023commandMessagesRcvd\030\014 \001"
      "(\r\022\031\n\021totalMessagesSent\030\r \001(\004\022$\n\034validOr"
      "igTargetPositionsSent\030\016 \001(\004\022\'\n\037preproces"
      "sedTargetPositionsSent\030\017 \001(\004\022 \n\030fusedTar"
      "getPositionsSent\030\020 \001(\004\022\033\n\023anomalyMessage"
      "sSent\030\021 \001(\004\022\032\n\022configMessagesSent\030\022 \001(\r\022"
      "\033\n\023requestMessagesSent\030\023 \001(\r\022\033\n\023commandM"
      "essagesSent\030\024 \001(\r\"\302\r\n\036PBMonitor_ToXGS_So"
      "ftwareStatus\022\025\n\rrecordUTCTime\030\001 \001(\r\022Z\n\026S"
      "ubsys_XGS_HJFF_Status\030\002 \001(\0162:.PBMonitor_"
      "ToXGS_SoftwareStatus.PB_Enum_XGS_Softwar"
      "eStatus\022V\n\022Subsys_ZHCL_Status\030\003 \001(\0162:.PB"
      "Monitor_ToXGS_SoftwareStatus.PB_Enum_XGS"
      "_SoftwareStatus\022Y\n\025Subsys_XXFenXi_Status"
      "\030\004 \001(\0162:.PBMonitor_ToXGS_SoftwareStatus."
      "PB_Enum_XGS_SoftwareStatus\022V\n\022Subsys_YWG"
      "L_Status\030\005 \001(\0162:.PBMonitor_ToXGS_Softwar"
      "eStatus.PB_Enum_XGS_SoftwareStatus\022V\n\022Su"
      "bsys_SJGL_Status\030\006 \001(\0162:.PBMonitor_ToXGS"
      "_SoftwareStatus.PB_Enum_XGS_SoftwareStat"
      "us\022X\n\024Module_XXZHCL_Status\030\007 \001(\0162:.PBMon"
      "itor_ToXGS_SoftwareStatus.PB_Enum_XGS_So"
      "ftwareStatus\022V\n\022Module_XXGL_Status\030\010 \001(\016"
      "2:.PBMonitor_ToXGS_SoftwareStatus.PB_Enu"
      "m_XGS_SoftwareStatus\022Y\n\025Module_XXFenFa_S"
      "tatus\030\t \001(\0162:.PBMonitor_ToXGS_SoftwareSt"
      "atus.PB_Enum_XGS_SoftwareStatus\022V\n\022Modul"
      "e_JKTJ_Status\030\n \001(\0162:.PBMonitor_ToXGS_So"
      "ftwareStatus.PB_Enum_XGS_SoftwareStatus\022"
      "V\n\022Module_WJFX_Status\030\013 \001(\0162:.PBMonitor_"
      "ToXGS_SoftwareStatus.PB_Enum_XGS_Softwar"
      "eStatus\022V\n\022Module_YCGJ_Status\030\014 \001(\0162:.PB"
      "Monitor_ToXGS_SoftwareStatus.PB_Enum_XGS"
      "_SoftwareStatus\022V\n\022Module_XTJK_Status\030\r "
      "\001(\0162:.PBMonitor_ToXGS_SoftwareStatus.PB_"
      "Enum_XGS_SoftwareStatus\022X\n\024Module_YHQXGL"
      "_Status\030\016 \001(\0162:.PBMonitor_ToXGS_Software"
      "Status.PB_Enum_XGS_SoftwareStatus\022Z\n\026Mod"
      "ule_SJYYGLWH_Status\030\017 \001(\0162:.PBMonitor_To"
      "XGS_SoftwareStatus.PB_Enum_XGS_SoftwareS"
      "tatus\022[\n\027Module_SJKYXZTJK_Status\030\020 \001(\0162:"
      ".PBMonitor_ToXGS_SoftwareStatus.PB_Enum_"
      "XGS_SoftwareStatus\022X\n\024Module_SJBFHF_Stat"
      "us\030\021 \001(\0162:.PBMonitor_ToXGS_SoftwareStatu"
      "s.PB_Enum_XGS_SoftwareStatus\022W\n\023Module_J"
      "RYCL_Status\030\022 \001(\0162:.PBMonitor_ToXGS_Soft"
      "wareStatus.PB_Enum_XGS_SoftwareStatus\022\030\n"
      "\020errorDescription\030\023 \001(\t\"}\n\032PB_Enum_XGS_S"
      "oftwareStatus\022\034\n\030EV_XGS_SoftwareStatus_N"
      "A\020\000\022 \n\034EV_XGS_SoftwareStatus_Normal\020\001\022\037\n"
      "\033EV_XGS_SoftwareStatus_Error\020\002\"\352\001\n\034PBMon"
      "itor_TargetDistribution\022\025\n\rrecordUTCTime"
      "\030\001 \001(\r\022\027\n\017distribution_id\030\002 \001(\005\022 \n\030distr"
      "ibutionStartUTCTime\030\003 \001(\r\022A\n\026enum_Distri"
      "butionState\030\004 \001(\0162!.PB_Enum_TargetDistri"
      "butionStatus\022\032\n\022message_Count_Sent\030\005 \001(\004"
      "\022\031\n\021target_Count_Sent\030\006 \001(\r\"\201\001\n\032PBMonito"
      "r_AliveTargetCount\022\025\n\rrecordUTCTime\030\001 \001("
      "\r\0222\n\022enum_targetID_Type\030\002 \001(\0162\026.PB_Enum_"
      "TargetID_Type\022\030\n\020aliveTargetcount\030\003 \001(\005\""
      "\321\003\n0PBMonitor_MessagesRcvdPerTargetInfoS"
      "ourceAndType\022\025\n\rrecordUTCTime\030\001 \001(\r\022:\n\026e"
      "num_targetInfo_Source\030\002 \001(\0162\032.PB_Enum_Ta"
      "rgetInfo_Source\0226\n\024enum_targetInfo_Type\030"
      "\003 \001(\0162\030.PB_Enum_TargetInfo_Type\022\024\n\014messa"
      "gesRcvd\030\004 \001(\003\022\023\n\013targetsRcvd\030\005 \001(\005\022h\n\022me"
      "ssagesRcvdStatus\030\006 \001(\0162L.PBMonitor_Messa"
      "gesRcvdPerTargetInfoSourceAndType.PB_Enu"
      "m_MessagesRcvdStatus\"}\n\032PB_Enum_Messages"
      "RcvdStatus\022\034\n\030EV_MessagesRcvdStatus_NA\020\000"
      "\022 \n\034EV_MessagesRcvdStatus_Normal\020\001\022\037\n\033EV"
      "_MessagesRcvdStatus_Error\020\002*\300\001\n PB_Enum_"
      "TargetDistributionStatus\022\"\n\036EV_TargetDis"
      "tributionStatus_NA\020\000\022\'\n#EV_TargetDistrib"
      "utionStatus_OnGoing\020\001\022&\n\"EV_TargetDistri"
      "butionStatus_Paused\020\002\022\'\n#EV_TargetDistri"
      "butionStatus_Stopped\020\003B\024\n\022team.iOceanPlu"
      "s.PBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Monitor.proto", &protobuf_RegisterTypes);
  ::protobuf_CommonEnum_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Monitor_2eproto
const ::google::protobuf::EnumDescriptor* PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus_descriptor() {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Monitor_2eproto::file_level_enum_descriptors[0];
}
bool PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::EV_XGS_SoftwareStatus_NA;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::EV_XGS_SoftwareStatus_Normal;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::EV_XGS_SoftwareStatus_Error;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::PB_Enum_XGS_SoftwareStatus_MIN;
const PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus PBMonitor_ToXGS_SoftwareStatus::PB_Enum_XGS_SoftwareStatus_MAX;
const int PBMonitor_ToXGS_SoftwareStatus::PB_Enum_XGS_SoftwareStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus_descriptor() {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Monitor_2eproto::file_level_enum_descriptors[1];
}
bool PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::EV_MessagesRcvdStatus_NA;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::EV_MessagesRcvdStatus_Normal;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::EV_MessagesRcvdStatus_Error;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PB_Enum_MessagesRcvdStatus_MIN;
const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PB_Enum_MessagesRcvdStatus_MAX;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PB_Enum_MessagesRcvdStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PB_Enum_TargetDistributionStatus_descriptor() {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Monitor_2eproto::file_level_enum_descriptors[2];
}
bool PB_Enum_TargetDistributionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PBMonitor::InitAsDefaultInstance() {
  ::_PBMonitor_default_instance_._instance.get_mutable()->monitorprobe_ = const_cast< ::PBMonitor_Probe*>(
      ::PBMonitor_Probe::internal_default_instance());
  ::_PBMonitor_default_instance_._instance.get_mutable()->monitorprobeack_ = const_cast< ::PBMonitor_ProbeAck*>(
      ::PBMonitor_ProbeAck::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor::kRecordUTCTimeFieldNumber;
const int PBMonitor::kSequenceNumFieldNumber;
const int PBMonitor::kEnumSenderSoftwareFieldNumber;
const int PBMonitor::kSoftwareStartedUTCTimeFieldNumber;
const int PBMonitor::kMonitorProbeFieldNumber;
const int PBMonitor::kMonitorProbeAckFieldNumber;
const int PBMonitor::kListMonitorTargetDistributionFieldNumber;
const int PBMonitor::kListMonitorAliveTargetCountFieldNumber;
const int PBMonitor::kListMessagesRcvdPerTargetInfoSourceAndTypeFieldNumber;
const int PBMonitor::kListToXGSSoftwareStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor::PBMonitor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Monitor_2eproto::scc_info_PBMonitor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor)
}
PBMonitor::PBMonitor(const PBMonitor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      listmonitor_targetdistribution_(from.listmonitor_targetdistribution_),
      listmonitor_alivetargetcount_(from.listmonitor_alivetargetcount_),
      listmessagesrcvdpertargetinfosourceandtype_(from.listmessagesrcvdpertargetinfosourceandtype_),
      listtoxgssoftwarestatus_(from.listtoxgssoftwarestatus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_monitorprobe()) {
    monitorprobe_ = new ::PBMonitor_Probe(*from.monitorprobe_);
  } else {
    monitorprobe_ = NULL;
  }
  if (from.has_monitorprobeack()) {
    monitorprobeack_ = new ::PBMonitor_ProbeAck(*from.monitorprobeack_);
  } else {
    monitorprobeack_ = NULL;
  }
  ::memcpy(&recordutctime_, &from.recordutctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&softwarestartedutctime_) -
    reinterpret_cast<char*>(&recordutctime_)) + sizeof(softwarestartedutctime_));
  // @@protoc_insertion_point(copy_constructor:PBMonitor)
}

void PBMonitor::SharedCtor() {
  ::memset(&monitorprobe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&softwarestartedutctime_) -
      reinterpret_cast<char*>(&monitorprobe_)) + sizeof(softwarestartedutctime_));
}

PBMonitor::~PBMonitor() {
  // @@protoc_insertion_point(destructor:PBMonitor)
  SharedDtor();
}

void PBMonitor::SharedDtor() {
  if (this != internal_default_instance()) delete monitorprobe_;
  if (this != internal_default_instance()) delete monitorprobeack_;
}

void PBMonitor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PBMonitor::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBMonitor& PBMonitor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Monitor_2eproto::scc_info_PBMonitor.base);
  return *internal_default_instance();
}


void PBMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listmonitor_targetdistribution_.Clear();
  listmonitor_alivetargetcount_.Clear();
  listmessagesrcvdpertargetinfosourceandtype_.Clear();
  listtoxgssoftwarestatus_.Clear();
  if (GetArenaNoVirtual() == NULL && monitorprobe_ != NULL) {
    delete monitorprobe_;
  }
  monitorprobe_ = NULL;
  if (GetArenaNoVirtual() == NULL && monitorprobeack_ != NULL) {
    delete monitorprobeack_;
  }
  monitorprobeack_ = NULL;
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&softwarestartedutctime_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(softwarestartedutctime_));
  _internal_metadata_.Clear();
}

bool PBMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 recordUTCTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequenceNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequencenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PB_Enum_Software enum_Sender_Software = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_sender_software(static_cast< ::PB_Enum_Software >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 softwareStartedUTCTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &softwarestartedutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_Probe monitorProbe = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitorprobe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ProbeAck monitorProbeAck = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitorprobeack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_listmonitor_targetdistribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_listmonitor_alivetargetcount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_listmessagesrcvdpertargetinfosourceandtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_listtoxgssoftwarestatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor)
  return false;
#undef DO_
}

void PBMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // uint32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequencenum(), output);
  }

  // .PB_Enum_Software enum_Sender_Software = 3;
  if (this->enum_sender_software() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enum_sender_software(), output);
  }

  // uint32 softwareStartedUTCTime = 4;
  if (this->softwarestartedutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->softwarestartedutctime(), output);
  }

  // .PBMonitor_Probe monitorProbe = 5;
  if (this->has_monitorprobe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_monitorprobe(), output);
  }

  // .PBMonitor_ProbeAck monitorProbeAck = 6;
  if (this->has_monitorprobeack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_monitorprobeack(), output);
  }

  // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listmonitor_targetdistribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->listmonitor_targetdistribution(static_cast<int>(i)),
      output);
  }

  // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listmonitor_alivetargetcount_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->listmonitor_alivetargetcount(static_cast<int>(i)),
      output);
  }

  // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listmessagesrcvdpertargetinfosourceandtype_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->listmessagesrcvdpertargetinfosourceandtype(static_cast<int>(i)),
      output);
  }

  // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listtoxgssoftwarestatus_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->listtoxgssoftwarestatus(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PBMonitor)
}

::google::protobuf::uint8* PBMonitor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // uint32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequencenum(), target);
  }

  // .PB_Enum_Software enum_Sender_Software = 3;
  if (this->enum_sender_software() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->enum_sender_software(), target);
  }

  // uint32 softwareStartedUTCTime = 4;
  if (this->softwarestartedutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->softwarestartedutctime(), target);
  }

  // .PBMonitor_Probe monitorProbe = 5;
  if (this->has_monitorprobe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_monitorprobe(), deterministic, target);
  }

  // .PBMonitor_ProbeAck monitorProbeAck = 6;
  if (this->has_monitorprobeack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_monitorprobeack(), deterministic, target);
  }

  // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listmonitor_targetdistribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->listmonitor_targetdistribution(static_cast<int>(i)), deterministic, target);
  }

  // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listmonitor_alivetargetcount_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->listmonitor_alivetargetcount(static_cast<int>(i)), deterministic, target);
  }

  // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listmessagesrcvdpertargetinfosourceandtype_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->listmessagesrcvdpertargetinfosourceandtype(static_cast<int>(i)), deterministic, target);
  }

  // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->listtoxgssoftwarestatus_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->listtoxgssoftwarestatus(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor)
  return target;
}

size_t PBMonitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .PBMonitor_TargetDistribution listMonitor_TargetDistribution = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->listmonitor_targetdistribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->listmonitor_targetdistribution(static_cast<int>(i)));
    }
  }

  // repeated .PBMonitor_AliveTargetCount listMonitor_AliveTargetCount = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->listmonitor_alivetargetcount_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->listmonitor_alivetargetcount(static_cast<int>(i)));
    }
  }

  // repeated .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType listMessagesRcvdPerTargetInfoSourceAndType = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->listmessagesrcvdpertargetinfosourceandtype_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->listmessagesrcvdpertargetinfosourceandtype(static_cast<int>(i)));
    }
  }

  // repeated .PBMonitor_ToXGS_SoftwareStatus listToXGSSoftwareStatus = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->listtoxgssoftwarestatus_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->listtoxgssoftwarestatus(static_cast<int>(i)));
    }
  }

  // .PBMonitor_Probe monitorProbe = 5;
  if (this->has_monitorprobe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *monitorprobe_);
  }

  // .PBMonitor_ProbeAck monitorProbeAck = 6;
  if (this->has_monitorprobeack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *monitorprobeack_);
  }

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // uint32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequencenum());
  }

  // .PB_Enum_Software enum_Sender_Software = 3;
  if (this->enum_sender_software() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_sender_software());
  }

  // uint32 softwareStartedUTCTime = 4;
  if (this->softwarestartedutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->softwarestartedutctime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMonitor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  const PBMonitor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor)
    MergeFrom(*source);
  }
}

void PBMonitor::MergeFrom(const PBMonitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listmonitor_targetdistribution_.MergeFrom(from.listmonitor_targetdistribution_);
  listmonitor_alivetargetcount_.MergeFrom(from.listmonitor_alivetargetcount_);
  listmessagesrcvdpertargetinfosourceandtype_.MergeFrom(from.listmessagesrcvdpertargetinfosourceandtype_);
  listtoxgssoftwarestatus_.MergeFrom(from.listtoxgssoftwarestatus_);
  if (from.has_monitorprobe()) {
    mutable_monitorprobe()->::PBMonitor_Probe::MergeFrom(from.monitorprobe());
  }
  if (from.has_monitorprobeack()) {
    mutable_monitorprobeack()->::PBMonitor_ProbeAck::MergeFrom(from.monitorprobeack());
  }
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.sequencenum() != 0) {
    set_sequencenum(from.sequencenum());
  }
  if (from.enum_sender_software() != 0) {
    set_enum_sender_software(from.enum_sender_software());
  }
  if (from.softwarestartedutctime() != 0) {
    set_softwarestartedutctime(from.softwarestartedutctime());
  }
}

void PBMonitor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor::CopyFrom(const PBMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonitor::IsInitialized() const {
  return true;
}

void PBMonitor::Swap(PBMonitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor::InternalSwap(PBMonitor* other) {
  using std::swap;
  CastToBase(&listmonitor_targetdistribution_)->InternalSwap(CastToBase(&other->listmonitor_targetdistribution_));
  CastToBase(&listmonitor_alivetargetcount_)->InternalSwap(CastToBase(&other->listmonitor_alivetargetcount_));
  CastToBase(&listmessagesrcvdpertargetinfosourceandtype_)->InternalSwap(CastToBase(&other->listmessagesrcvdpertargetinfosourceandtype_));
  CastToBase(&listtoxgssoftwarestatus_)->InternalSwap(CastToBase(&other->listtoxgssoftwarestatus_));
  swap(monitorprobe_, other->monitorprobe_);
  swap(monitorprobeack_, other->monitorprobeack_);
  swap(recordutctime_, other->recordutctime_);
  swap(sequencenum_, other->sequencenum_);
  swap(enum_sender_software_, other->enum_sender_software_);
  swap(softwarestartedutctime_, other->softwarestartedutctime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PBMonitor::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PBMonitor_Probe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_Probe::kRecordUTCTimeFieldNumber;
const int PBMonitor_Probe::kMonitorProbeSequenceNumFieldNumber;
const int PBMonitor_Probe::kStrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_Probe::PBMonitor_Probe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_Probe.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_Probe)
}
PBMonitor_Probe::PBMonitor_Probe(const PBMonitor_Probe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strmsg().size() > 0) {
    strmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmsg_);
  }
  ::memcpy(&recordutctime_, &from.recordutctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&monitorprobesequencenum_) -
    reinterpret_cast<char*>(&recordutctime_)) + sizeof(monitorprobesequencenum_));
  // @@protoc_insertion_point(copy_constructor:PBMonitor_Probe)
}

void PBMonitor_Probe::SharedCtor() {
  strmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitorprobesequencenum_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(monitorprobesequencenum_));
}

PBMonitor_Probe::~PBMonitor_Probe() {
  // @@protoc_insertion_point(destructor:PBMonitor_Probe)
  SharedDtor();
}

void PBMonitor_Probe::SharedDtor() {
  strmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBMonitor_Probe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PBMonitor_Probe::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBMonitor_Probe& PBMonitor_Probe::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Monitor_2eproto::scc_info_PBMonitor_Probe.base);
  return *internal_default_instance();
}


void PBMonitor_Probe::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_Probe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitorprobesequencenum_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(monitorprobesequencenum_));
  _internal_metadata_.Clear();
}

bool PBMonitor_Probe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_Probe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 recordUTCTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monitorProbeSequenceNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitorprobesequencenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strmsg().data(), static_cast<int>(this->strmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMonitor_Probe.strMsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_Probe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_Probe)
  return false;
#undef DO_
}

void PBMonitor_Probe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_Probe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // uint32 monitorProbeSequenceNum = 2;
  if (this->monitorprobesequencenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monitorprobesequencenum(), output);
  }

  // string strMsg = 3;
  if (this->strmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmsg().data(), static_cast<int>(this->strmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_Probe.strMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PBMonitor_Probe)
}

::google::protobuf::uint8* PBMonitor_Probe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_Probe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // uint32 monitorProbeSequenceNum = 2;
  if (this->monitorprobesequencenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monitorprobesequencenum(), target);
  }

  // string strMsg = 3;
  if (this->strmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmsg().data(), static_cast<int>(this->strmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_Probe.strMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_Probe)
  return target;
}

size_t PBMonitor_Probe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_Probe)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string strMsg = 3;
  if (this->strmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strmsg());
  }

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // uint32 monitorProbeSequenceNum = 2;
  if (this->monitorprobesequencenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monitorprobesequencenum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMonitor_Probe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_Probe)
  GOOGLE_DCHECK_NE(&from, this);
  const PBMonitor_Probe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_Probe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_Probe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_Probe)
    MergeFrom(*source);
  }
}

void PBMonitor_Probe::MergeFrom(const PBMonitor_Probe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_Probe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strmsg().size() > 0) {

    strmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmsg_);
  }
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.monitorprobesequencenum() != 0) {
    set_monitorprobesequencenum(from.monitorprobesequencenum());
  }
}

void PBMonitor_Probe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_Probe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_Probe::CopyFrom(const PBMonitor_Probe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_Probe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonitor_Probe::IsInitialized() const {
  return true;
}

void PBMonitor_Probe::Swap(PBMonitor_Probe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_Probe::InternalSwap(PBMonitor_Probe* other) {
  using std::swap;
  strmsg_.Swap(&other->strmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recordutctime_, other->recordutctime_);
  swap(monitorprobesequencenum_, other->monitorprobesequencenum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PBMonitor_Probe::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PBMonitor_ProbeAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_ProbeAck::kRecordUTCTimeFieldNumber;
const int PBMonitor_ProbeAck::kEnumProbeSenderSoftwareFieldNumber;
const int PBMonitor_ProbeAck::kMonitorProbeSequenceNumAckedFieldNumber;
const int PBMonitor_ProbeAck::kTotalMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kOrigTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kValidOrigTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kPreprocessedTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kFusedTargetPositionsRcvdFieldNumber;
const int PBMonitor_ProbeAck::kAnomalyMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kConfigMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kRequestMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kCommandMessagesRcvdFieldNumber;
const int PBMonitor_ProbeAck::kTotalMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kValidOrigTargetPositionsSentFieldNumber;
const int PBMonitor_ProbeAck::kPreprocessedTargetPositionsSentFieldNumber;
const int PBMonitor_ProbeAck::kFusedTargetPositionsSentFieldNumber;
const int PBMonitor_ProbeAck::kAnomalyMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kConfigMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kRequestMessagesSentFieldNumber;
const int PBMonitor_ProbeAck::kCommandMessagesSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_ProbeAck::PBMonitor_ProbeAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_ProbeAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_ProbeAck)
}
PBMonitor_ProbeAck::PBMonitor_ProbeAck(const PBMonitor_ProbeAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recordutctime_, &from.recordutctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&commandmessagessent_) -
    reinterpret_cast<char*>(&recordutctime_)) + sizeof(commandmessagessent_));
  // @@protoc_insertion_point(copy_constructor:PBMonitor_ProbeAck)
}

void PBMonitor_ProbeAck::SharedCtor() {
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commandmessagessent_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(commandmessagessent_));
}

PBMonitor_ProbeAck::~PBMonitor_ProbeAck() {
  // @@protoc_insertion_point(destructor:PBMonitor_ProbeAck)
  SharedDtor();
}

void PBMonitor_ProbeAck::SharedDtor() {
}

void PBMonitor_ProbeAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PBMonitor_ProbeAck::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBMonitor_ProbeAck& PBMonitor_ProbeAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Monitor_2eproto::scc_info_PBMonitor_ProbeAck.base);
  return *internal_default_instance();
}


void PBMonitor_ProbeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_ProbeAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commandmessagessent_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(commandmessagessent_));
  _internal_metadata_.Clear();
}

bool PBMonitor_ProbeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_ProbeAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 recordUTCTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PB_Enum_Software enum_ProbeSender_Software = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_probesender_software(static_cast< ::PB_Enum_Software >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monitorProbeSequenceNumAcked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monitorprobesequencenumacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalMessagesRcvd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 origTargetPositionsRcvd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 validOrigTargetPositionsRcvd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validorigtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 preprocessedTargetPositionsRcvd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preprocessedtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fusedTargetPositionsRcvd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fusedtargetpositionsrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 anomalyMessagesRcvd = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anomalymessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 configMessagesRcvd = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 requestMessagesRcvd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 commandMessagesRcvd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandmessagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 totalMessagesSent = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmessagessent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 validOrigTargetPositionsSent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validorigtargetpositionssent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 preprocessedTargetPositionsSent = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preprocessedtargetpositionssent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fusedTargetPositionsSent = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fusedtargetpositionssent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 anomalyMessagesSent = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anomalymessagessent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 configMessagesSent = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configmessagessent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 requestMessagesSent = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestmessagessent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 commandMessagesSent = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandmessagessent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_ProbeAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_ProbeAck)
  return false;
#undef DO_
}

void PBMonitor_ProbeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_ProbeAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // .PB_Enum_Software enum_ProbeSender_Software = 2;
  if (this->enum_probesender_software() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->enum_probesender_software(), output);
  }

  // uint32 monitorProbeSequenceNumAcked = 3;
  if (this->monitorprobesequencenumacked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monitorprobesequencenumacked(), output);
  }

  // uint64 totalMessagesRcvd = 4;
  if (this->totalmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->totalmessagesrcvd(), output);
  }

  // uint64 origTargetPositionsRcvd = 5;
  if (this->origtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->origtargetpositionsrcvd(), output);
  }

  // uint64 validOrigTargetPositionsRcvd = 6;
  if (this->validorigtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->validorigtargetpositionsrcvd(), output);
  }

  // uint64 preprocessedTargetPositionsRcvd = 7;
  if (this->preprocessedtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->preprocessedtargetpositionsrcvd(), output);
  }

  // uint64 fusedTargetPositionsRcvd = 8;
  if (this->fusedtargetpositionsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fusedtargetpositionsrcvd(), output);
  }

  // uint64 anomalyMessagesRcvd = 9;
  if (this->anomalymessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->anomalymessagesrcvd(), output);
  }

  // uint32 configMessagesRcvd = 10;
  if (this->configmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->configmessagesrcvd(), output);
  }

  // uint32 requestMessagesRcvd = 11;
  if (this->requestmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->requestmessagesrcvd(), output);
  }

  // uint32 commandMessagesRcvd = 12;
  if (this->commandmessagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->commandmessagesrcvd(), output);
  }

  // uint64 totalMessagesSent = 13;
  if (this->totalmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->totalmessagessent(), output);
  }

  // uint64 validOrigTargetPositionsSent = 14;
  if (this->validorigtargetpositionssent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->validorigtargetpositionssent(), output);
  }

  // uint64 preprocessedTargetPositionsSent = 15;
  if (this->preprocessedtargetpositionssent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->preprocessedtargetpositionssent(), output);
  }

  // uint64 fusedTargetPositionsSent = 16;
  if (this->fusedtargetpositionssent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->fusedtargetpositionssent(), output);
  }

  // uint64 anomalyMessagesSent = 17;
  if (this->anomalymessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->anomalymessagessent(), output);
  }

  // uint32 configMessagesSent = 18;
  if (this->configmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->configmessagessent(), output);
  }

  // uint32 requestMessagesSent = 19;
  if (this->requestmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->requestmessagessent(), output);
  }

  // uint32 commandMessagesSent = 20;
  if (this->commandmessagessent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->commandmessagessent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PBMonitor_ProbeAck)
}

::google::protobuf::uint8* PBMonitor_ProbeAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_ProbeAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // .PB_Enum_Software enum_ProbeSender_Software = 2;
  if (this->enum_probesender_software() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->enum_probesender_software(), target);
  }

  // uint32 monitorProbeSequenceNumAcked = 3;
  if (this->monitorprobesequencenumacked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monitorprobesequencenumacked(), target);
  }

  // uint64 totalMessagesRcvd = 4;
  if (this->totalmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->totalmessagesrcvd(), target);
  }

  // uint64 origTargetPositionsRcvd = 5;
  if (this->origtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->origtargetpositionsrcvd(), target);
  }

  // uint64 validOrigTargetPositionsRcvd = 6;
  if (this->validorigtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->validorigtargetpositionsrcvd(), target);
  }

  // uint64 preprocessedTargetPositionsRcvd = 7;
  if (this->preprocessedtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->preprocessedtargetpositionsrcvd(), target);
  }

  // uint64 fusedTargetPositionsRcvd = 8;
  if (this->fusedtargetpositionsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fusedtargetpositionsrcvd(), target);
  }

  // uint64 anomalyMessagesRcvd = 9;
  if (this->anomalymessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->anomalymessagesrcvd(), target);
  }

  // uint32 configMessagesRcvd = 10;
  if (this->configmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->configmessagesrcvd(), target);
  }

  // uint32 requestMessagesRcvd = 11;
  if (this->requestmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->requestmessagesrcvd(), target);
  }

  // uint32 commandMessagesRcvd = 12;
  if (this->commandmessagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->commandmessagesrcvd(), target);
  }

  // uint64 totalMessagesSent = 13;
  if (this->totalmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->totalmessagessent(), target);
  }

  // uint64 validOrigTargetPositionsSent = 14;
  if (this->validorigtargetpositionssent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->validorigtargetpositionssent(), target);
  }

  // uint64 preprocessedTargetPositionsSent = 15;
  if (this->preprocessedtargetpositionssent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->preprocessedtargetpositionssent(), target);
  }

  // uint64 fusedTargetPositionsSent = 16;
  if (this->fusedtargetpositionssent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->fusedtargetpositionssent(), target);
  }

  // uint64 anomalyMessagesSent = 17;
  if (this->anomalymessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->anomalymessagessent(), target);
  }

  // uint32 configMessagesSent = 18;
  if (this->configmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->configmessagessent(), target);
  }

  // uint32 requestMessagesSent = 19;
  if (this->requestmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->requestmessagessent(), target);
  }

  // uint32 commandMessagesSent = 20;
  if (this->commandmessagessent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->commandmessagessent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_ProbeAck)
  return target;
}

size_t PBMonitor_ProbeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_ProbeAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // .PB_Enum_Software enum_ProbeSender_Software = 2;
  if (this->enum_probesender_software() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_probesender_software());
  }

  // uint64 totalMessagesRcvd = 4;
  if (this->totalmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalmessagesrcvd());
  }

  // uint64 origTargetPositionsRcvd = 5;
  if (this->origtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->origtargetpositionsrcvd());
  }

  // uint64 validOrigTargetPositionsRcvd = 6;
  if (this->validorigtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validorigtargetpositionsrcvd());
  }

  // uint32 monitorProbeSequenceNumAcked = 3;
  if (this->monitorprobesequencenumacked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monitorprobesequencenumacked());
  }

  // uint32 configMessagesRcvd = 10;
  if (this->configmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->configmessagesrcvd());
  }

  // uint64 preprocessedTargetPositionsRcvd = 7;
  if (this->preprocessedtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->preprocessedtargetpositionsrcvd());
  }

  // uint64 fusedTargetPositionsRcvd = 8;
  if (this->fusedtargetpositionsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fusedtargetpositionsrcvd());
  }

  // uint64 anomalyMessagesRcvd = 9;
  if (this->anomalymessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->anomalymessagesrcvd());
  }

  // uint32 requestMessagesRcvd = 11;
  if (this->requestmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestmessagesrcvd());
  }

  // uint32 commandMessagesRcvd = 12;
  if (this->commandmessagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commandmessagesrcvd());
  }

  // uint64 totalMessagesSent = 13;
  if (this->totalmessagessent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->totalmessagessent());
  }

  // uint64 validOrigTargetPositionsSent = 14;
  if (this->validorigtargetpositionssent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validorigtargetpositionssent());
  }

  // uint64 preprocessedTargetPositionsSent = 15;
  if (this->preprocessedtargetpositionssent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->preprocessedtargetpositionssent());
  }

  // uint64 fusedTargetPositionsSent = 16;
  if (this->fusedtargetpositionssent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fusedtargetpositionssent());
  }

  // uint64 anomalyMessagesSent = 17;
  if (this->anomalymessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->anomalymessagessent());
  }

  // uint32 configMessagesSent = 18;
  if (this->configmessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->configmessagessent());
  }

  // uint32 requestMessagesSent = 19;
  if (this->requestmessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestmessagessent());
  }

  // uint32 commandMessagesSent = 20;
  if (this->commandmessagessent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commandmessagessent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMonitor_ProbeAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_ProbeAck)
  GOOGLE_DCHECK_NE(&from, this);
  const PBMonitor_ProbeAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_ProbeAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_ProbeAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_ProbeAck)
    MergeFrom(*source);
  }
}

void PBMonitor_ProbeAck::MergeFrom(const PBMonitor_ProbeAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_ProbeAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.enum_probesender_software() != 0) {
    set_enum_probesender_software(from.enum_probesender_software());
  }
  if (from.totalmessagesrcvd() != 0) {
    set_totalmessagesrcvd(from.totalmessagesrcvd());
  }
  if (from.origtargetpositionsrcvd() != 0) {
    set_origtargetpositionsrcvd(from.origtargetpositionsrcvd());
  }
  if (from.validorigtargetpositionsrcvd() != 0) {
    set_validorigtargetpositionsrcvd(from.validorigtargetpositionsrcvd());
  }
  if (from.monitorprobesequencenumacked() != 0) {
    set_monitorprobesequencenumacked(from.monitorprobesequencenumacked());
  }
  if (from.configmessagesrcvd() != 0) {
    set_configmessagesrcvd(from.configmessagesrcvd());
  }
  if (from.preprocessedtargetpositionsrcvd() != 0) {
    set_preprocessedtargetpositionsrcvd(from.preprocessedtargetpositionsrcvd());
  }
  if (from.fusedtargetpositionsrcvd() != 0) {
    set_fusedtargetpositionsrcvd(from.fusedtargetpositionsrcvd());
  }
  if (from.anomalymessagesrcvd() != 0) {
    set_anomalymessagesrcvd(from.anomalymessagesrcvd());
  }
  if (from.requestmessagesrcvd() != 0) {
    set_requestmessagesrcvd(from.requestmessagesrcvd());
  }
  if (from.commandmessagesrcvd() != 0) {
    set_commandmessagesrcvd(from.commandmessagesrcvd());
  }
  if (from.totalmessagessent() != 0) {
    set_totalmessagessent(from.totalmessagessent());
  }
  if (from.validorigtargetpositionssent() != 0) {
    set_validorigtargetpositionssent(from.validorigtargetpositionssent());
  }
  if (from.preprocessedtargetpositionssent() != 0) {
    set_preprocessedtargetpositionssent(from.preprocessedtargetpositionssent());
  }
  if (from.fusedtargetpositionssent() != 0) {
    set_fusedtargetpositionssent(from.fusedtargetpositionssent());
  }
  if (from.anomalymessagessent() != 0) {
    set_anomalymessagessent(from.anomalymessagessent());
  }
  if (from.configmessagessent() != 0) {
    set_configmessagessent(from.configmessagessent());
  }
  if (from.requestmessagessent() != 0) {
    set_requestmessagessent(from.requestmessagessent());
  }
  if (from.commandmessagessent() != 0) {
    set_commandmessagessent(from.commandmessagessent());
  }
}

void PBMonitor_ProbeAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_ProbeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_ProbeAck::CopyFrom(const PBMonitor_ProbeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_ProbeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonitor_ProbeAck::IsInitialized() const {
  return true;
}

void PBMonitor_ProbeAck::Swap(PBMonitor_ProbeAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_ProbeAck::InternalSwap(PBMonitor_ProbeAck* other) {
  using std::swap;
  swap(recordutctime_, other->recordutctime_);
  swap(enum_probesender_software_, other->enum_probesender_software_);
  swap(totalmessagesrcvd_, other->totalmessagesrcvd_);
  swap(origtargetpositionsrcvd_, other->origtargetpositionsrcvd_);
  swap(validorigtargetpositionsrcvd_, other->validorigtargetpositionsrcvd_);
  swap(monitorprobesequencenumacked_, other->monitorprobesequencenumacked_);
  swap(configmessagesrcvd_, other->configmessagesrcvd_);
  swap(preprocessedtargetpositionsrcvd_, other->preprocessedtargetpositionsrcvd_);
  swap(fusedtargetpositionsrcvd_, other->fusedtargetpositionsrcvd_);
  swap(anomalymessagesrcvd_, other->anomalymessagesrcvd_);
  swap(requestmessagesrcvd_, other->requestmessagesrcvd_);
  swap(commandmessagesrcvd_, other->commandmessagesrcvd_);
  swap(totalmessagessent_, other->totalmessagessent_);
  swap(validorigtargetpositionssent_, other->validorigtargetpositionssent_);
  swap(preprocessedtargetpositionssent_, other->preprocessedtargetpositionssent_);
  swap(fusedtargetpositionssent_, other->fusedtargetpositionssent_);
  swap(anomalymessagessent_, other->anomalymessagessent_);
  swap(configmessagessent_, other->configmessagessent_);
  swap(requestmessagessent_, other->requestmessagessent_);
  swap(commandmessagessent_, other->commandmessagessent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PBMonitor_ProbeAck::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PBMonitor_ToXGS_SoftwareStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_ToXGS_SoftwareStatus::kRecordUTCTimeFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysXGSHJFFStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysZHCLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysXXFenXiStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysYWGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kSubsysSJGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXXZHCLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXXGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXXFenFaStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleJKTJStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleWJFXStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleYCGJStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleXTJKStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleYHQXGLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleSJYYGLWHStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleSJKYXZTJKStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleSJBFHFStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kModuleJRYCLStatusFieldNumber;
const int PBMonitor_ToXGS_SoftwareStatus::kErrorDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_ToXGS_SoftwareStatus::PBMonitor_ToXGS_SoftwareStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_ToXGS_SoftwareStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_ToXGS_SoftwareStatus)
}
PBMonitor_ToXGS_SoftwareStatus::PBMonitor_ToXGS_SoftwareStatus(const PBMonitor_ToXGS_SoftwareStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errordescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errordescription().size() > 0) {
    errordescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
  }
  ::memcpy(&recordutctime_, &from.recordutctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&module_jrycl_status_) -
    reinterpret_cast<char*>(&recordutctime_)) + sizeof(module_jrycl_status_));
  // @@protoc_insertion_point(copy_constructor:PBMonitor_ToXGS_SoftwareStatus)
}

void PBMonitor_ToXGS_SoftwareStatus::SharedCtor() {
  errordescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_jrycl_status_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(module_jrycl_status_));
}

PBMonitor_ToXGS_SoftwareStatus::~PBMonitor_ToXGS_SoftwareStatus() {
  // @@protoc_insertion_point(destructor:PBMonitor_ToXGS_SoftwareStatus)
  SharedDtor();
}

void PBMonitor_ToXGS_SoftwareStatus::SharedDtor() {
  errordescription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBMonitor_ToXGS_SoftwareStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PBMonitor_ToXGS_SoftwareStatus::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBMonitor_ToXGS_SoftwareStatus& PBMonitor_ToXGS_SoftwareStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Monitor_2eproto::scc_info_PBMonitor_ToXGS_SoftwareStatus.base);
  return *internal_default_instance();
}


void PBMonitor_ToXGS_SoftwareStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_ToXGS_SoftwareStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_jrycl_status_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(module_jrycl_status_));
  _internal_metadata_.Clear();
}

bool PBMonitor_ToXGS_SoftwareStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_ToXGS_SoftwareStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 recordUTCTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_xgs_hjff_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_zhcl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_xxfenxi_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_ywgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_sjgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xxzhcl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xxgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xxfenfa_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_jktj_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_wjfx_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_ycgj_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_xtjk_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_yhqxgl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_sjyyglwh_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_sjkyxztjk_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_sjbfhf_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_jrycl_status(static_cast< ::PBMonitor_ToXGS_SoftwareStatus_PB_Enum_XGS_SoftwareStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorDescription = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordescription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errordescription().data(), static_cast<int>(this->errordescription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PBMonitor_ToXGS_SoftwareStatus.errorDescription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_ToXGS_SoftwareStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_ToXGS_SoftwareStatus)
  return false;
#undef DO_
}

void PBMonitor_ToXGS_SoftwareStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_ToXGS_SoftwareStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
  if (this->subsys_xgs_hjff_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->subsys_xgs_hjff_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
  if (this->subsys_zhcl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subsys_zhcl_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
  if (this->subsys_xxfenxi_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->subsys_xxfenxi_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
  if (this->subsys_ywgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->subsys_ywgl_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
  if (this->subsys_sjgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->subsys_sjgl_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
  if (this->module_xxzhcl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->module_xxzhcl_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
  if (this->module_xxgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->module_xxgl_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
  if (this->module_xxfenfa_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->module_xxfenfa_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
  if (this->module_jktj_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->module_jktj_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
  if (this->module_wjfx_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->module_wjfx_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
  if (this->module_ycgj_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->module_ycgj_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
  if (this->module_xtjk_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->module_xtjk_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
  if (this->module_yhqxgl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->module_yhqxgl_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
  if (this->module_sjyyglwh_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->module_sjyyglwh_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
  if (this->module_sjkyxztjk_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->module_sjkyxztjk_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
  if (this->module_sjbfhf_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->module_sjbfhf_status(), output);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
  if (this->module_jrycl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->module_jrycl_status(), output);
  }

  // string errorDescription = 19;
  if (this->errordescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errordescription().data(), static_cast<int>(this->errordescription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_ToXGS_SoftwareStatus.errorDescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->errordescription(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PBMonitor_ToXGS_SoftwareStatus)
}

::google::protobuf::uint8* PBMonitor_ToXGS_SoftwareStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_ToXGS_SoftwareStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
  if (this->subsys_xgs_hjff_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->subsys_xgs_hjff_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
  if (this->subsys_zhcl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subsys_zhcl_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
  if (this->subsys_xxfenxi_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->subsys_xxfenxi_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
  if (this->subsys_ywgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->subsys_ywgl_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
  if (this->subsys_sjgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->subsys_sjgl_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
  if (this->module_xxzhcl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->module_xxzhcl_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
  if (this->module_xxgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->module_xxgl_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
  if (this->module_xxfenfa_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->module_xxfenfa_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
  if (this->module_jktj_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->module_jktj_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
  if (this->module_wjfx_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->module_wjfx_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
  if (this->module_ycgj_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->module_ycgj_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
  if (this->module_xtjk_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->module_xtjk_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
  if (this->module_yhqxgl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->module_yhqxgl_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
  if (this->module_sjyyglwh_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->module_sjyyglwh_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
  if (this->module_sjkyxztjk_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->module_sjkyxztjk_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
  if (this->module_sjbfhf_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->module_sjbfhf_status(), target);
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
  if (this->module_jrycl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->module_jrycl_status(), target);
  }

  // string errorDescription = 19;
  if (this->errordescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errordescription().data(), static_cast<int>(this->errordescription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PBMonitor_ToXGS_SoftwareStatus.errorDescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->errordescription(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_ToXGS_SoftwareStatus)
  return target;
}

size_t PBMonitor_ToXGS_SoftwareStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_ToXGS_SoftwareStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string errorDescription = 19;
  if (this->errordescription().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errordescription());
  }

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XGS_HJFF_Status = 2;
  if (this->subsys_xgs_hjff_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_xgs_hjff_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_ZHCL_Status = 3;
  if (this->subsys_zhcl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_zhcl_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_XXFenXi_Status = 4;
  if (this->subsys_xxfenxi_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_xxfenxi_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_YWGL_Status = 5;
  if (this->subsys_ywgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_ywgl_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Subsys_SJGL_Status = 6;
  if (this->subsys_sjgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_sjgl_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXZHCL_Status = 7;
  if (this->module_xxzhcl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xxzhcl_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXGL_Status = 8;
  if (this->module_xxgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xxgl_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XXFenFa_Status = 9;
  if (this->module_xxfenfa_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xxfenfa_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JKTJ_Status = 10;
  if (this->module_jktj_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_jktj_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_WJFX_Status = 11;
  if (this->module_wjfx_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_wjfx_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YCGJ_Status = 12;
  if (this->module_ycgj_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_ycgj_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_XTJK_Status = 13;
  if (this->module_xtjk_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_xtjk_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_YHQXGL_Status = 14;
  if (this->module_yhqxgl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_yhqxgl_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJYYGLWH_Status = 15;
  if (this->module_sjyyglwh_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_sjyyglwh_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJKYXZTJK_Status = 16;
  if (this->module_sjkyxztjk_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_sjkyxztjk_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_SJBFHF_Status = 17;
  if (this->module_sjbfhf_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_sjbfhf_status());
  }

  // .PBMonitor_ToXGS_SoftwareStatus.PB_Enum_XGS_SoftwareStatus Module_JRYCL_Status = 18;
  if (this->module_jrycl_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_jrycl_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMonitor_ToXGS_SoftwareStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_ToXGS_SoftwareStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PBMonitor_ToXGS_SoftwareStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_ToXGS_SoftwareStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_ToXGS_SoftwareStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_ToXGS_SoftwareStatus)
    MergeFrom(*source);
  }
}

void PBMonitor_ToXGS_SoftwareStatus::MergeFrom(const PBMonitor_ToXGS_SoftwareStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_ToXGS_SoftwareStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errordescription().size() > 0) {

    errordescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
  }
  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.subsys_xgs_hjff_status() != 0) {
    set_subsys_xgs_hjff_status(from.subsys_xgs_hjff_status());
  }
  if (from.subsys_zhcl_status() != 0) {
    set_subsys_zhcl_status(from.subsys_zhcl_status());
  }
  if (from.subsys_xxfenxi_status() != 0) {
    set_subsys_xxfenxi_status(from.subsys_xxfenxi_status());
  }
  if (from.subsys_ywgl_status() != 0) {
    set_subsys_ywgl_status(from.subsys_ywgl_status());
  }
  if (from.subsys_sjgl_status() != 0) {
    set_subsys_sjgl_status(from.subsys_sjgl_status());
  }
  if (from.module_xxzhcl_status() != 0) {
    set_module_xxzhcl_status(from.module_xxzhcl_status());
  }
  if (from.module_xxgl_status() != 0) {
    set_module_xxgl_status(from.module_xxgl_status());
  }
  if (from.module_xxfenfa_status() != 0) {
    set_module_xxfenfa_status(from.module_xxfenfa_status());
  }
  if (from.module_jktj_status() != 0) {
    set_module_jktj_status(from.module_jktj_status());
  }
  if (from.module_wjfx_status() != 0) {
    set_module_wjfx_status(from.module_wjfx_status());
  }
  if (from.module_ycgj_status() != 0) {
    set_module_ycgj_status(from.module_ycgj_status());
  }
  if (from.module_xtjk_status() != 0) {
    set_module_xtjk_status(from.module_xtjk_status());
  }
  if (from.module_yhqxgl_status() != 0) {
    set_module_yhqxgl_status(from.module_yhqxgl_status());
  }
  if (from.module_sjyyglwh_status() != 0) {
    set_module_sjyyglwh_status(from.module_sjyyglwh_status());
  }
  if (from.module_sjkyxztjk_status() != 0) {
    set_module_sjkyxztjk_status(from.module_sjkyxztjk_status());
  }
  if (from.module_sjbfhf_status() != 0) {
    set_module_sjbfhf_status(from.module_sjbfhf_status());
  }
  if (from.module_jrycl_status() != 0) {
    set_module_jrycl_status(from.module_jrycl_status());
  }
}

void PBMonitor_ToXGS_SoftwareStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_ToXGS_SoftwareStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_ToXGS_SoftwareStatus::CopyFrom(const PBMonitor_ToXGS_SoftwareStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_ToXGS_SoftwareStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonitor_ToXGS_SoftwareStatus::IsInitialized() const {
  return true;
}

void PBMonitor_ToXGS_SoftwareStatus::Swap(PBMonitor_ToXGS_SoftwareStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_ToXGS_SoftwareStatus::InternalSwap(PBMonitor_ToXGS_SoftwareStatus* other) {
  using std::swap;
  errordescription_.Swap(&other->errordescription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recordutctime_, other->recordutctime_);
  swap(subsys_xgs_hjff_status_, other->subsys_xgs_hjff_status_);
  swap(subsys_zhcl_status_, other->subsys_zhcl_status_);
  swap(subsys_xxfenxi_status_, other->subsys_xxfenxi_status_);
  swap(subsys_ywgl_status_, other->subsys_ywgl_status_);
  swap(subsys_sjgl_status_, other->subsys_sjgl_status_);
  swap(module_xxzhcl_status_, other->module_xxzhcl_status_);
  swap(module_xxgl_status_, other->module_xxgl_status_);
  swap(module_xxfenfa_status_, other->module_xxfenfa_status_);
  swap(module_jktj_status_, other->module_jktj_status_);
  swap(module_wjfx_status_, other->module_wjfx_status_);
  swap(module_ycgj_status_, other->module_ycgj_status_);
  swap(module_xtjk_status_, other->module_xtjk_status_);
  swap(module_yhqxgl_status_, other->module_yhqxgl_status_);
  swap(module_sjyyglwh_status_, other->module_sjyyglwh_status_);
  swap(module_sjkyxztjk_status_, other->module_sjkyxztjk_status_);
  swap(module_sjbfhf_status_, other->module_sjbfhf_status_);
  swap(module_jrycl_status_, other->module_jrycl_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PBMonitor_ToXGS_SoftwareStatus::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PBMonitor_TargetDistribution::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_TargetDistribution::kRecordUTCTimeFieldNumber;
const int PBMonitor_TargetDistribution::kDistributionIdFieldNumber;
const int PBMonitor_TargetDistribution::kDistributionStartUTCTimeFieldNumber;
const int PBMonitor_TargetDistribution::kEnumDistributionStateFieldNumber;
const int PBMonitor_TargetDistribution::kMessageCountSentFieldNumber;
const int PBMonitor_TargetDistribution::kTargetCountSentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_TargetDistribution::PBMonitor_TargetDistribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_TargetDistribution.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_TargetDistribution)
}
PBMonitor_TargetDistribution::PBMonitor_TargetDistribution(const PBMonitor_TargetDistribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recordutctime_, &from.recordutctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_count_sent_) -
    reinterpret_cast<char*>(&recordutctime_)) + sizeof(target_count_sent_));
  // @@protoc_insertion_point(copy_constructor:PBMonitor_TargetDistribution)
}

void PBMonitor_TargetDistribution::SharedCtor() {
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_count_sent_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(target_count_sent_));
}

PBMonitor_TargetDistribution::~PBMonitor_TargetDistribution() {
  // @@protoc_insertion_point(destructor:PBMonitor_TargetDistribution)
  SharedDtor();
}

void PBMonitor_TargetDistribution::SharedDtor() {
}

void PBMonitor_TargetDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PBMonitor_TargetDistribution::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBMonitor_TargetDistribution& PBMonitor_TargetDistribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Monitor_2eproto::scc_info_PBMonitor_TargetDistribution.base);
  return *internal_default_instance();
}


void PBMonitor_TargetDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_TargetDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_count_sent_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(target_count_sent_));
  _internal_metadata_.Clear();
}

bool PBMonitor_TargetDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_TargetDistribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 recordUTCTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 distribution_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distribution_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 distributionStartUTCTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distributionstartutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_distributionstate(static_cast< ::PB_Enum_TargetDistributionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 message_Count_Sent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &message_count_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_Count_Sent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_count_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_TargetDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_TargetDistribution)
  return false;
#undef DO_
}

void PBMonitor_TargetDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_TargetDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // int32 distribution_id = 2;
  if (this->distribution_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->distribution_id(), output);
  }

  // uint32 distributionStartUTCTime = 3;
  if (this->distributionstartutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->distributionstartutctime(), output);
  }

  // .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
  if (this->enum_distributionstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->enum_distributionstate(), output);
  }

  // uint64 message_Count_Sent = 5;
  if (this->message_count_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->message_count_sent(), output);
  }

  // uint32 target_Count_Sent = 6;
  if (this->target_count_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_count_sent(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PBMonitor_TargetDistribution)
}

::google::protobuf::uint8* PBMonitor_TargetDistribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_TargetDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // int32 distribution_id = 2;
  if (this->distribution_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->distribution_id(), target);
  }

  // uint32 distributionStartUTCTime = 3;
  if (this->distributionstartutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->distributionstartutctime(), target);
  }

  // .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
  if (this->enum_distributionstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->enum_distributionstate(), target);
  }

  // uint64 message_Count_Sent = 5;
  if (this->message_count_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->message_count_sent(), target);
  }

  // uint32 target_Count_Sent = 6;
  if (this->target_count_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_count_sent(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_TargetDistribution)
  return target;
}

size_t PBMonitor_TargetDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_TargetDistribution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // int32 distribution_id = 2;
  if (this->distribution_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->distribution_id());
  }

  // uint32 distributionStartUTCTime = 3;
  if (this->distributionstartutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->distributionstartutctime());
  }

  // .PB_Enum_TargetDistributionStatus enum_DistributionState = 4;
  if (this->enum_distributionstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_distributionstate());
  }

  // uint64 message_Count_Sent = 5;
  if (this->message_count_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->message_count_sent());
  }

  // uint32 target_Count_Sent = 6;
  if (this->target_count_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_count_sent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMonitor_TargetDistribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_TargetDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const PBMonitor_TargetDistribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_TargetDistribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_TargetDistribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_TargetDistribution)
    MergeFrom(*source);
  }
}

void PBMonitor_TargetDistribution::MergeFrom(const PBMonitor_TargetDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_TargetDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.distribution_id() != 0) {
    set_distribution_id(from.distribution_id());
  }
  if (from.distributionstartutctime() != 0) {
    set_distributionstartutctime(from.distributionstartutctime());
  }
  if (from.enum_distributionstate() != 0) {
    set_enum_distributionstate(from.enum_distributionstate());
  }
  if (from.message_count_sent() != 0) {
    set_message_count_sent(from.message_count_sent());
  }
  if (from.target_count_sent() != 0) {
    set_target_count_sent(from.target_count_sent());
  }
}

void PBMonitor_TargetDistribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_TargetDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_TargetDistribution::CopyFrom(const PBMonitor_TargetDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_TargetDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonitor_TargetDistribution::IsInitialized() const {
  return true;
}

void PBMonitor_TargetDistribution::Swap(PBMonitor_TargetDistribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_TargetDistribution::InternalSwap(PBMonitor_TargetDistribution* other) {
  using std::swap;
  swap(recordutctime_, other->recordutctime_);
  swap(distribution_id_, other->distribution_id_);
  swap(distributionstartutctime_, other->distributionstartutctime_);
  swap(enum_distributionstate_, other->enum_distributionstate_);
  swap(message_count_sent_, other->message_count_sent_);
  swap(target_count_sent_, other->target_count_sent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PBMonitor_TargetDistribution::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PBMonitor_AliveTargetCount::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_AliveTargetCount::kRecordUTCTimeFieldNumber;
const int PBMonitor_AliveTargetCount::kEnumTargetIDTypeFieldNumber;
const int PBMonitor_AliveTargetCount::kAliveTargetcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_AliveTargetCount::PBMonitor_AliveTargetCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_AliveTargetCount.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_AliveTargetCount)
}
PBMonitor_AliveTargetCount::PBMonitor_AliveTargetCount(const PBMonitor_AliveTargetCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recordutctime_, &from.recordutctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&alivetargetcount_) -
    reinterpret_cast<char*>(&recordutctime_)) + sizeof(alivetargetcount_));
  // @@protoc_insertion_point(copy_constructor:PBMonitor_AliveTargetCount)
}

void PBMonitor_AliveTargetCount::SharedCtor() {
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alivetargetcount_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(alivetargetcount_));
}

PBMonitor_AliveTargetCount::~PBMonitor_AliveTargetCount() {
  // @@protoc_insertion_point(destructor:PBMonitor_AliveTargetCount)
  SharedDtor();
}

void PBMonitor_AliveTargetCount::SharedDtor() {
}

void PBMonitor_AliveTargetCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PBMonitor_AliveTargetCount::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBMonitor_AliveTargetCount& PBMonitor_AliveTargetCount::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Monitor_2eproto::scc_info_PBMonitor_AliveTargetCount.base);
  return *internal_default_instance();
}


void PBMonitor_AliveTargetCount::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_AliveTargetCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alivetargetcount_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(alivetargetcount_));
  _internal_metadata_.Clear();
}

bool PBMonitor_AliveTargetCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_AliveTargetCount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 recordUTCTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PB_Enum_TargetID_Type enum_targetID_Type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_targetid_type(static_cast< ::PB_Enum_TargetID_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 aliveTargetcount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alivetargetcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_AliveTargetCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_AliveTargetCount)
  return false;
#undef DO_
}

void PBMonitor_AliveTargetCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_AliveTargetCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // .PB_Enum_TargetID_Type enum_targetID_Type = 2;
  if (this->enum_targetid_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->enum_targetid_type(), output);
  }

  // int32 aliveTargetcount = 3;
  if (this->alivetargetcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alivetargetcount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PBMonitor_AliveTargetCount)
}

::google::protobuf::uint8* PBMonitor_AliveTargetCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_AliveTargetCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // .PB_Enum_TargetID_Type enum_targetID_Type = 2;
  if (this->enum_targetid_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->enum_targetid_type(), target);
  }

  // int32 aliveTargetcount = 3;
  if (this->alivetargetcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alivetargetcount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_AliveTargetCount)
  return target;
}

size_t PBMonitor_AliveTargetCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_AliveTargetCount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // .PB_Enum_TargetID_Type enum_targetID_Type = 2;
  if (this->enum_targetid_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_targetid_type());
  }

  // int32 aliveTargetcount = 3;
  if (this->alivetargetcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->alivetargetcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMonitor_AliveTargetCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_AliveTargetCount)
  GOOGLE_DCHECK_NE(&from, this);
  const PBMonitor_AliveTargetCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_AliveTargetCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_AliveTargetCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_AliveTargetCount)
    MergeFrom(*source);
  }
}

void PBMonitor_AliveTargetCount::MergeFrom(const PBMonitor_AliveTargetCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_AliveTargetCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.enum_targetid_type() != 0) {
    set_enum_targetid_type(from.enum_targetid_type());
  }
  if (from.alivetargetcount() != 0) {
    set_alivetargetcount(from.alivetargetcount());
  }
}

void PBMonitor_AliveTargetCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_AliveTargetCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_AliveTargetCount::CopyFrom(const PBMonitor_AliveTargetCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_AliveTargetCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonitor_AliveTargetCount::IsInitialized() const {
  return true;
}

void PBMonitor_AliveTargetCount::Swap(PBMonitor_AliveTargetCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_AliveTargetCount::InternalSwap(PBMonitor_AliveTargetCount* other) {
  using std::swap;
  swap(recordutctime_, other->recordutctime_);
  swap(enum_targetid_type_, other->enum_targetid_type_);
  swap(alivetargetcount_, other->alivetargetcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PBMonitor_AliveTargetCount::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kRecordUTCTimeFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kEnumTargetInfoSourceFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kEnumTargetInfoTypeFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kMessagesRcvdFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kTargetsRcvdFieldNumber;
const int PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::kMessagesRcvdStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Monitor_2eproto::scc_info_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
}
PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType(const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&recordutctime_, &from.recordutctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&messagesrcvdstatus_) -
    reinterpret_cast<char*>(&recordutctime_)) + sizeof(messagesrcvdstatus_));
  // @@protoc_insertion_point(copy_constructor:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SharedCtor() {
  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messagesrcvdstatus_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(messagesrcvdstatus_));
}

PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::~PBMonitor_MessagesRcvdPerTargetInfoSourceAndType() {
  // @@protoc_insertion_point(destructor:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  SharedDtor();
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SharedDtor() {
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::descriptor() {
  ::protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Monitor_2eproto::scc_info_PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.base);
  return *internal_default_instance();
}


void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::Clear() {
// @@protoc_insertion_point(message_clear_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&recordutctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messagesrcvdstatus_) -
      reinterpret_cast<char*>(&recordutctime_)) + sizeof(messagesrcvdstatus_));
  _internal_metadata_.Clear();
}

bool PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 recordUTCTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordutctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_targetinfo_source(static_cast< ::PB_Enum_TargetInfo_Source >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_enum_targetinfo_type(static_cast< ::PB_Enum_TargetInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 messagesRcvd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messagesrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetsRcvd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetsrcvd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_messagesrcvdstatus(static_cast< ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType_PB_Enum_MessagesRcvdStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  return false;
#undef DO_
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordutctime(), output);
  }

  // .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
  if (this->enum_targetinfo_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->enum_targetinfo_source(), output);
  }

  // .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
  if (this->enum_targetinfo_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->enum_targetinfo_type(), output);
  }

  // int64 messagesRcvd = 4;
  if (this->messagesrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->messagesrcvd(), output);
  }

  // int32 targetsRcvd = 5;
  if (this->targetsrcvd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetsrcvd(), output);
  }

  // .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
  if (this->messagesrcvdstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->messagesrcvdstatus(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
}

::google::protobuf::uint8* PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordutctime(), target);
  }

  // .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
  if (this->enum_targetinfo_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->enum_targetinfo_source(), target);
  }

  // .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
  if (this->enum_targetinfo_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->enum_targetinfo_type(), target);
  }

  // int64 messagesRcvd = 4;
  if (this->messagesrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->messagesrcvd(), target);
  }

  // int32 targetsRcvd = 5;
  if (this->targetsrcvd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetsrcvd(), target);
  }

  // .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
  if (this->messagesrcvdstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->messagesrcvdstatus(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  return target;
}

size_t PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 recordUTCTime = 1;
  if (this->recordutctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recordutctime());
  }

  // .PB_Enum_TargetInfo_Source enum_targetInfo_Source = 2;
  if (this->enum_targetinfo_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_targetinfo_source());
  }

  // int64 messagesRcvd = 4;
  if (this->messagesrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->messagesrcvd());
  }

  // .PB_Enum_TargetInfo_Type enum_targetInfo_Type = 3;
  if (this->enum_targetinfo_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_targetinfo_type());
  }

  // int32 targetsRcvd = 5;
  if (this->targetsrcvd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->targetsrcvd());
  }

  // .PBMonitor_MessagesRcvdPerTargetInfoSourceAndType.PB_Enum_MessagesRcvdStatus messagesRcvdStatus = 6;
  if (this->messagesrcvdstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagesrcvdstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  GOOGLE_DCHECK_NE(&from, this);
  const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
    MergeFrom(*source);
  }
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::MergeFrom(const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recordutctime() != 0) {
    set_recordutctime(from.recordutctime());
  }
  if (from.enum_targetinfo_source() != 0) {
    set_enum_targetinfo_source(from.enum_targetinfo_source());
  }
  if (from.messagesrcvd() != 0) {
    set_messagesrcvd(from.messagesrcvd());
  }
  if (from.enum_targetinfo_type() != 0) {
    set_enum_targetinfo_type(from.enum_targetinfo_type());
  }
  if (from.targetsrcvd() != 0) {
    set_targetsrcvd(from.targetsrcvd());
  }
  if (from.messagesrcvdstatus() != 0) {
    set_messagesrcvdstatus(from.messagesrcvdstatus());
  }
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::CopyFrom(const PBMonitor_MessagesRcvdPerTargetInfoSourceAndType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBMonitor_MessagesRcvdPerTargetInfoSourceAndType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::IsInitialized() const {
  return true;
}

void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::Swap(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::InternalSwap(PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* other) {
  using std::swap;
  swap(recordutctime_, other->recordutctime_);
  swap(enum_targetinfo_source_, other->enum_targetinfo_source_);
  swap(messagesrcvd_, other->messagesrcvd_);
  swap(enum_targetinfo_type_, other->enum_targetinfo_type_);
  swap(targetsrcvd_, other->targetsrcvd_);
  swap(messagesrcvdstatus_, other->messagesrcvdstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PBMonitor_MessagesRcvdPerTargetInfoSourceAndType::GetMetadata() const {
  protobuf_Monitor_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Monitor_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PBMonitor* Arena::CreateMaybeMessage< ::PBMonitor >(Arena* arena) {
  return Arena::CreateInternal< ::PBMonitor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PBMonitor_Probe* Arena::CreateMaybeMessage< ::PBMonitor_Probe >(Arena* arena) {
  return Arena::CreateInternal< ::PBMonitor_Probe >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PBMonitor_ProbeAck* Arena::CreateMaybeMessage< ::PBMonitor_ProbeAck >(Arena* arena) {
  return Arena::CreateInternal< ::PBMonitor_ProbeAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PBMonitor_ToXGS_SoftwareStatus* Arena::CreateMaybeMessage< ::PBMonitor_ToXGS_SoftwareStatus >(Arena* arena) {
  return Arena::CreateInternal< ::PBMonitor_ToXGS_SoftwareStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PBMonitor_TargetDistribution* Arena::CreateMaybeMessage< ::PBMonitor_TargetDistribution >(Arena* arena) {
  return Arena::CreateInternal< ::PBMonitor_TargetDistribution >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PBMonitor_AliveTargetCount* Arena::CreateMaybeMessage< ::PBMonitor_AliveTargetCount >(Arena* arena) {
  return Arena::CreateInternal< ::PBMonitor_AliveTargetCount >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType* Arena::CreateMaybeMessage< ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType >(Arena* arena) {
  return Arena::CreateInternal< ::PBMonitor_MessagesRcvdPerTargetInfoSourceAndType >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
